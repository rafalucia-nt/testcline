module.exports = [
"[project]/node_modules/dom-mutator/dist/dom-mutator.esm.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "connectGlobalObserver",
    ()=>connectGlobalObserver,
    "default",
    ()=>__TURBOPACK__default__export__,
    "disconnectGlobalObserver",
    ()=>disconnectGlobalObserver,
    "validAttributeName",
    ()=>validAttributeName
]);
var validAttributeName = /^[a-zA-Z:_][a-zA-Z0-9:_.-]*$/;
var nullController = {
    revert: function revert() {}
};
var elements = /*#__PURE__*/ new Map();
var mutations = /*#__PURE__*/ new Set();
function getObserverInit(attr) {
    return attr === 'html' ? {
        childList: true,
        subtree: true,
        attributes: true,
        characterData: true
    } : {
        childList: false,
        subtree: false,
        attributes: true,
        attributeFilter: [
            attr
        ]
    };
}
function getElementRecord(element) {
    var record = elements.get(element);
    if (!record) {
        record = {
            element: element,
            attributes: {}
        };
        elements.set(element, record);
    }
    return record;
}
function createElementPropertyRecord(el, attr, getCurrentValue, setValue, mutationRunner) {
    var currentValue = getCurrentValue(el);
    var record = {
        isDirty: false,
        originalValue: currentValue,
        virtualValue: currentValue,
        mutations: [],
        el: el,
        _positionTimeout: null,
        observer: new MutationObserver(function() {
            // enact a 1 second timeout that blocks subsequent firing of the
            // observer until the timeout is complete. This will prevent multiple
            // mutations from firing in quick succession, which can cause the
            // mutation to be reverted before the DOM has a chance to update.
            if (attr === 'position' && record._positionTimeout) return;
            else if (attr === 'position') record._positionTimeout = setTimeout(function() {
                record._positionTimeout = null;
            }, 1000);
            var currentValue = getCurrentValue(el);
            if (attr === 'position' && currentValue.parentNode === record.virtualValue.parentNode && currentValue.insertBeforeNode === record.virtualValue.insertBeforeNode) return;
            if (currentValue === record.virtualValue) return;
            record.originalValue = currentValue;
            mutationRunner(record);
        }),
        mutationRunner: mutationRunner,
        setValue: setValue,
        getCurrentValue: getCurrentValue
    };
    if (attr === 'position' && el.parentNode) {
        record.observer.observe(el.parentNode, {
            childList: true,
            subtree: true,
            attributes: false,
            characterData: false
        });
    } else {
        record.observer.observe(el, getObserverInit(attr));
    }
    return record;
}
function queueIfNeeded(val, record) {
    var currentVal = record.getCurrentValue(record.el);
    record.virtualValue = val;
    if (val && typeof val !== 'string') {
        if (!currentVal || val.parentNode !== currentVal.parentNode || val.insertBeforeNode !== currentVal.insertBeforeNode) {
            record.isDirty = true;
            runDOMUpdates();
        }
    } else if (val !== currentVal) {
        record.isDirty = true;
        runDOMUpdates();
    }
}
function htmlMutationRunner(record) {
    var val = record.originalValue;
    record.mutations.forEach(function(m) {
        return val = m.mutate(val);
    });
    queueIfNeeded(getTransformedHTML(val), record);
}
function classMutationRunner(record) {
    var val = new Set(record.originalValue.split(/\s+/).filter(Boolean));
    record.mutations.forEach(function(m) {
        return m.mutate(val);
    });
    queueIfNeeded(Array.from(val).filter(Boolean).join(' '), record);
}
function attrMutationRunner(record) {
    var val = record.originalValue;
    record.mutations.forEach(function(m) {
        return val = m.mutate(val);
    });
    queueIfNeeded(val, record);
}
function _loadDOMNodes(_ref) {
    var parentSelector = _ref.parentSelector, insertBeforeSelector = _ref.insertBeforeSelector;
    var parentNode = document.querySelector(parentSelector);
    if (!parentNode) return null;
    var insertBeforeNode = insertBeforeSelector ? document.querySelector(insertBeforeSelector) : null;
    if (insertBeforeSelector && !insertBeforeNode) return null;
    return {
        parentNode: parentNode,
        insertBeforeNode: insertBeforeNode
    };
}
function positionMutationRunner(record) {
    var val = record.originalValue;
    record.mutations.forEach(function(m) {
        var selectors = m.mutate();
        var newNodes = _loadDOMNodes(selectors);
        val = newNodes || val;
    });
    queueIfNeeded(val, record);
}
var getHTMLValue = function getHTMLValue(el) {
    return el.innerHTML;
};
var setHTMLValue = function setHTMLValue(el, value) {
    return el.innerHTML = value;
};
function getElementHTMLRecord(element) {
    var elementRecord = getElementRecord(element);
    if (!elementRecord.html) {
        elementRecord.html = createElementPropertyRecord(element, 'html', getHTMLValue, setHTMLValue, htmlMutationRunner);
    }
    return elementRecord.html;
}
var getElementPosition = function getElementPosition(el) {
    return {
        parentNode: el.parentElement,
        insertBeforeNode: el.nextElementSibling
    };
};
var setElementPosition = function setElementPosition(el, value) {
    if (value.insertBeforeNode && !value.parentNode.contains(value.insertBeforeNode)) {
        // skip position mutation - insertBeforeNode not a child of parent. happens
        // when mutation observer for indvidual element fires out of order
        return;
    }
    value.parentNode.insertBefore(el, value.insertBeforeNode);
};
function getElementPositionRecord(element) {
    var elementRecord = getElementRecord(element);
    if (!elementRecord.position) {
        elementRecord.position = createElementPropertyRecord(element, 'position', getElementPosition, setElementPosition, positionMutationRunner);
    }
    return elementRecord.position;
}
var setClassValue = function setClassValue(el, val) {
    return val ? el.className = val : el.removeAttribute('class');
};
var getClassValue = function getClassValue(el) {
    return el.className;
};
function getElementClassRecord(el) {
    var elementRecord = getElementRecord(el);
    if (!elementRecord.classes) {
        elementRecord.classes = createElementPropertyRecord(el, 'class', getClassValue, setClassValue, classMutationRunner);
    }
    return elementRecord.classes;
}
var getAttrValue = function getAttrValue(attrName) {
    return function(el) {
        var _el$getAttribute;
        return (_el$getAttribute = el.getAttribute(attrName)) != null ? _el$getAttribute : null;
    };
};
var setAttrValue = function setAttrValue(attrName) {
    return function(el, val) {
        return val !== null ? el.setAttribute(attrName, val) : el.removeAttribute(attrName);
    };
};
function getElementAttributeRecord(el, attr) {
    var elementRecord = getElementRecord(el);
    if (!elementRecord.attributes[attr]) {
        elementRecord.attributes[attr] = createElementPropertyRecord(el, attr, getAttrValue(attr), setAttrValue(attr), attrMutationRunner);
    }
    return elementRecord.attributes[attr];
}
function deleteElementPropertyRecord(el, attr) {
    var element = elements.get(el);
    if (!element) return;
    if (attr === 'html') {
        var _element$html, _element$html$observe;
        (_element$html = element.html) == null ? void 0 : (_element$html$observe = _element$html.observer) == null ? void 0 : _element$html$observe.disconnect();
        delete element.html;
    } else if (attr === 'class') {
        var _element$classes, _element$classes$obse;
        (_element$classes = element.classes) == null ? void 0 : (_element$classes$obse = _element$classes.observer) == null ? void 0 : _element$classes$obse.disconnect();
        delete element.classes;
    } else if (attr === 'position') {
        var _element$position, _element$position$obs;
        (_element$position = element.position) == null ? void 0 : (_element$position$obs = _element$position.observer) == null ? void 0 : _element$position$obs.disconnect();
        delete element.position;
    } else {
        var _element$attributes, _element$attributes$a, _element$attributes$a2;
        (_element$attributes = element.attributes) == null ? void 0 : (_element$attributes$a = _element$attributes[attr]) == null ? void 0 : (_element$attributes$a2 = _element$attributes$a.observer) == null ? void 0 : _element$attributes$a2.disconnect();
        delete element.attributes[attr];
    }
}
var transformContainer;
function getTransformedHTML(html) {
    if (!transformContainer) {
        transformContainer = document.createElement('div');
    }
    transformContainer.innerHTML = html;
    return transformContainer.innerHTML;
}
function setPropertyValue(el, attr, m) {
    if (!m.isDirty) return;
    m.isDirty = false;
    var val = m.virtualValue;
    if (!m.mutations.length) {
        deleteElementPropertyRecord(el, attr);
    }
    m.setValue(el, val);
}
function setValue(m, el) {
    m.html && setPropertyValue(el, 'html', m.html);
    m.classes && setPropertyValue(el, 'class', m.classes);
    m.position && setPropertyValue(el, 'position', m.position);
    Object.keys(m.attributes).forEach(function(attr) {
        setPropertyValue(el, attr, m.attributes[attr]);
    });
}
function runDOMUpdates() {
    elements.forEach(setValue);
} // find or create ElementPropertyRecord, add mutation to it, then run
function startMutating(mutation, element) {
    var record = null;
    if (mutation.kind === 'html') {
        record = getElementHTMLRecord(element);
    } else if (mutation.kind === 'class') {
        record = getElementClassRecord(element);
    } else if (mutation.kind === 'attribute') {
        record = getElementAttributeRecord(element, mutation.attribute);
    } else if (mutation.kind === 'position') {
        record = getElementPositionRecord(element);
    }
    if (!record) return;
    record.mutations.push(mutation);
    record.mutationRunner(record);
} // get (existing) ElementPropertyRecord, remove mutation from it, then run
function stopMutating(mutation, el) {
    var record = null;
    if (mutation.kind === 'html') {
        record = getElementHTMLRecord(el);
    } else if (mutation.kind === 'class') {
        record = getElementClassRecord(el);
    } else if (mutation.kind === 'attribute') {
        record = getElementAttributeRecord(el, mutation.attribute);
    } else if (mutation.kind === 'position') {
        record = getElementPositionRecord(el);
    }
    if (!record) return;
    var index = record.mutations.indexOf(mutation);
    if (index !== -1) record.mutations.splice(index, 1);
    record.mutationRunner(record);
} // maintain list of elements associated with mutation
function refreshElementsSet(mutation) {
    // if a position mutation has already found an element to move, don't move
    // any more elements
    if (mutation.kind === 'position' && mutation.elements.size === 1) return;
    var existingElements = new Set(mutation.elements);
    var matchingElements = document.querySelectorAll(mutation.selector);
    matchingElements.forEach(function(el) {
        if (!existingElements.has(el)) {
            mutation.elements.add(el);
            startMutating(mutation, el);
        }
    });
}
function revertMutation(mutation) {
    mutation.elements.forEach(function(el) {
        return stopMutating(mutation, el);
    });
    mutation.elements.clear();
    mutations["delete"](mutation);
}
function refreshAllElementSets() {
    mutations.forEach(refreshElementsSet);
} // Observer for elements that don't exist in the DOM yet
var observer;
function disconnectGlobalObserver() {
    observer && observer.disconnect();
}
function connectGlobalObserver() {
    if (typeof document === 'undefined') return;
    if (!observer) {
        observer = new MutationObserver(function() {
            refreshAllElementSets();
        });
    }
    refreshAllElementSets();
    observer.observe(document.documentElement, {
        childList: true,
        subtree: true,
        attributes: false,
        characterData: false
    });
} // run on init
connectGlobalObserver();
function newMutation(m) {
    // Not in a browser
    if (typeof document === 'undefined') return nullController; // add to global index of mutations
    mutations.add(m); // run refresh on init to establish list of elements associated w/ mutation
    refreshElementsSet(m);
    return {
        revert: function revert() {
            revertMutation(m);
        }
    };
}
function html(selector, mutate) {
    return newMutation({
        kind: 'html',
        elements: new Set(),
        mutate: mutate,
        selector: selector
    });
}
function position(selector, mutate) {
    return newMutation({
        kind: 'position',
        elements: new Set(),
        mutate: mutate,
        selector: selector
    });
}
function classes(selector, mutate) {
    return newMutation({
        kind: 'class',
        elements: new Set(),
        mutate: mutate,
        selector: selector
    });
}
function attribute(selector, attribute, mutate) {
    if (!validAttributeName.test(attribute)) return nullController;
    if (attribute === 'class' || attribute === 'className') {
        return classes(selector, function(classnames) {
            var mutatedClassnames = mutate(Array.from(classnames).join(' '));
            classnames.clear();
            if (!mutatedClassnames) return;
            mutatedClassnames.split(/\s+/g).filter(Boolean).forEach(function(c) {
                return classnames.add(c);
            });
        });
    }
    return newMutation({
        kind: 'attribute',
        attribute: attribute,
        elements: new Set(),
        mutate: mutate,
        selector: selector
    });
}
function declarative(_ref2) {
    var selector = _ref2.selector, action = _ref2.action, value = _ref2.value, attr = _ref2.attribute, parentSelector = _ref2.parentSelector, insertBeforeSelector = _ref2.insertBeforeSelector;
    if (attr === 'html') {
        if (action === 'append') {
            return html(selector, function(val) {
                return val + (value != null ? value : '');
            });
        } else if (action === 'set') {
            return html(selector, function() {
                return value != null ? value : '';
            });
        }
    } else if (attr === 'class') {
        if (action === 'append') {
            return classes(selector, function(val) {
                if (value) val.add(value);
            });
        } else if (action === 'remove') {
            return classes(selector, function(val) {
                if (value) val["delete"](value);
            });
        } else if (action === 'set') {
            return classes(selector, function(val) {
                val.clear();
                if (value) val.add(value);
            });
        }
    } else if (attr === 'position') {
        if (action === 'set' && parentSelector) {
            return position(selector, function() {
                return {
                    insertBeforeSelector: insertBeforeSelector,
                    parentSelector: parentSelector
                };
            });
        }
    } else {
        if (action === 'append') {
            return attribute(selector, attr, function(val) {
                return val !== null ? val + (value != null ? value : '') : value != null ? value : '';
            });
        } else if (action === 'set') {
            return attribute(selector, attr, function() {
                return value != null ? value : '';
            });
        } else if (action === 'remove') {
            return attribute(selector, attr, function() {
                return null;
            });
        }
    }
    return nullController;
}
var index = {
    html: html,
    classes: classes,
    attribute: attribute,
    position: position,
    declarative: declarative
};
const __TURBOPACK__default__export__ = index;
;
 //# sourceMappingURL=dom-mutator.esm.js.map
}),
"[project]/node_modules/@growthbook/growthbook/dist/esm/util.mjs [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "chooseVariation",
    ()=>chooseVariation,
    "decrypt",
    ()=>decrypt,
    "getAutoExperimentChangeType",
    ()=>getAutoExperimentChangeType,
    "getBucketRanges",
    ()=>getBucketRanges,
    "getEqualWeights",
    ()=>getEqualWeights,
    "getPolyfills",
    ()=>getPolyfills,
    "getQueryStringOverride",
    ()=>getQueryStringOverride,
    "getUrlRegExp",
    ()=>getUrlRegExp,
    "hash",
    ()=>hash,
    "inNamespace",
    ()=>inNamespace,
    "inRange",
    ()=>inRange,
    "isIncluded",
    ()=>isIncluded,
    "isURLTargeted",
    ()=>isURLTargeted,
    "loadSDKVersion",
    ()=>loadSDKVersion,
    "mergeQueryStrings",
    ()=>mergeQueryStrings,
    "paddedVersionString",
    ()=>paddedVersionString,
    "promiseTimeout",
    ()=>promiseTimeout,
    "toString",
    ()=>toString
]);
const polyfills = {
    fetch: globalThis.fetch ? globalThis.fetch.bind(globalThis) : undefined,
    SubtleCrypto: globalThis.crypto ? globalThis.crypto.subtle : undefined,
    EventSource: globalThis.EventSource
};
function getPolyfills() {
    return polyfills;
}
function hashFnv32a(str) {
    let hval = 0x811c9dc5;
    const l = str.length;
    for(let i = 0; i < l; i++){
        hval ^= str.charCodeAt(i);
        hval += (hval << 1) + (hval << 4) + (hval << 7) + (hval << 8) + (hval << 24);
    }
    return hval >>> 0;
}
function hash(seed, value, version) {
    // New unbiased hashing algorithm
    if (version === 2) {
        return hashFnv32a(hashFnv32a(seed + value) + "") % 10000 / 10000;
    }
    // Original biased hashing algorithm (keep for backwards compatibility)
    if (version === 1) {
        return hashFnv32a(value + seed) % 1000 / 1000;
    }
    // Unknown hash version
    return null;
}
function getEqualWeights(n) {
    if (n <= 0) return [];
    return new Array(n).fill(1 / n);
}
function inRange(n, range) {
    return n >= range[0] && n < range[1];
}
function inNamespace(hashValue, namespace) {
    const n = hash("__" + namespace[0], hashValue, 1);
    if (n === null) return false;
    return n >= namespace[1] && n < namespace[2];
}
function chooseVariation(n, ranges) {
    for(let i = 0; i < ranges.length; i++){
        if (inRange(n, ranges[i])) {
            return i;
        }
    }
    return -1;
}
function getUrlRegExp(regexString) {
    try {
        const escaped = regexString.replace(/([^\\])\//g, "$1\\/");
        return new RegExp(escaped);
    } catch (e) {
        console.error(e);
        return undefined;
    }
}
function isURLTargeted(url, targets) {
    if (!targets.length) return false;
    let hasIncludeRules = false;
    let isIncluded = false;
    for(let i = 0; i < targets.length; i++){
        const match = _evalURLTarget(url, targets[i].type, targets[i].pattern);
        if (targets[i].include === false) {
            if (match) return false;
        } else {
            hasIncludeRules = true;
            if (match) isIncluded = true;
        }
    }
    return isIncluded || !hasIncludeRules;
}
function _evalSimpleUrlPart(actual, pattern, isPath) {
    try {
        // Escape special regex characters and change wildcard `_____` to `.*`
        let escaped = pattern.replace(/[*.+?^${}()|[\]\\]/g, "\\$&").replace(/_____/g, ".*");
        if (isPath) {
            // When matching pathname, make leading/trailing slashes optional
            escaped = "\\/?" + escaped.replace(/(^\/|\/$)/g, "") + "\\/?";
        }
        const regex = new RegExp("^" + escaped + "$", "i");
        return regex.test(actual);
    } catch (e) {
        return false;
    }
}
function _evalSimpleUrlTarget(actual, pattern) {
    try {
        // If a protocol is missing, but a host is specified, add `https://` to the front
        // Use "_____" as the wildcard since `*` is not a valid hostname in some browsers
        const expected = new URL(pattern.replace(/^([^:/?]*)\./i, "https://$1.").replace(/\*/g, "_____"), "https://_____");
        // Compare each part of the URL separately
        const comps = [
            [
                actual.host,
                expected.host,
                false
            ],
            [
                actual.pathname,
                expected.pathname,
                true
            ]
        ];
        // We only want to compare hashes if it's explicitly being targeted
        if (expected.hash) {
            comps.push([
                actual.hash,
                expected.hash,
                false
            ]);
        }
        expected.searchParams.forEach((v, k)=>{
            comps.push([
                actual.searchParams.get(k) || "",
                v,
                false
            ]);
        });
        // If any comparisons fail, the whole thing fails
        return !comps.some((data)=>!_evalSimpleUrlPart(data[0], data[1], data[2]));
    } catch (e) {
        return false;
    }
}
function _evalURLTarget(url, type, pattern) {
    try {
        const parsed = new URL(url, "https://_");
        if (type === "regex") {
            const regex = getUrlRegExp(pattern);
            if (!regex) return false;
            return regex.test(parsed.href) || regex.test(parsed.href.substring(parsed.origin.length));
        } else if (type === "simple") {
            return _evalSimpleUrlTarget(parsed, pattern);
        }
        return false;
    } catch (e) {
        return false;
    }
}
function getBucketRanges(numVariations, coverage, weights) {
    coverage = coverage === undefined ? 1 : coverage;
    // Make sure coverage is within bounds
    if (coverage < 0) {
        if ("TURBOPACK compile-time truthy", 1) {
            console.error("Experiment.coverage must be greater than or equal to 0");
        }
        coverage = 0;
    } else if (coverage > 1) {
        if ("TURBOPACK compile-time truthy", 1) {
            console.error("Experiment.coverage must be less than or equal to 1");
        }
        coverage = 1;
    }
    // Default to equal weights if missing or invalid
    const equal = getEqualWeights(numVariations);
    weights = weights || equal;
    if (weights.length !== numVariations) {
        if ("TURBOPACK compile-time truthy", 1) {
            console.error("Experiment.weights array must be the same length as Experiment.variations");
        }
        weights = equal;
    }
    // If weights don't add up to 1 (or close to it), default to equal weights
    const totalWeight = weights.reduce((w, sum)=>sum + w, 0);
    if (totalWeight < 0.99 || totalWeight > 1.01) {
        if ("TURBOPACK compile-time truthy", 1) {
            console.error("Experiment.weights must add up to 1");
        }
        weights = equal;
    }
    // Covert weights to ranges
    let cumulative = 0;
    return weights.map((w)=>{
        const start = cumulative;
        cumulative += w;
        return [
            start,
            start + coverage * w
        ];
    });
}
function getQueryStringOverride(id, url, numVariations) {
    if (!url) {
        return null;
    }
    const search = url.split("?")[1];
    if (!search) {
        return null;
    }
    const match = search.replace(/#.*/, "") // Get rid of anchor
    .split("&") // Split into key/value pairs
    .map((kv)=>kv.split("=", 2)).filter((_ref)=>{
        let [k] = _ref;
        return k === id;
    }) // Look for key that matches the experiment id
    .map((_ref2)=>{
        let [, v] = _ref2;
        return parseInt(v);
    }); // Parse the value into an integer
    if (match.length > 0 && match[0] >= 0 && match[0] < numVariations) return match[0];
    return null;
}
function isIncluded(include) {
    try {
        return include();
    } catch (e) {
        console.error(e);
        return false;
    }
}
const base64ToBuf = (b)=>Uint8Array.from(atob(b), (c)=>c.charCodeAt(0));
async function decrypt(encryptedString, decryptionKey, subtle) {
    decryptionKey = decryptionKey || "";
    subtle = subtle || globalThis.crypto && globalThis.crypto.subtle || polyfills.SubtleCrypto;
    if (!subtle) {
        throw new Error("No SubtleCrypto implementation found");
    }
    try {
        const key = await subtle.importKey("raw", base64ToBuf(decryptionKey), {
            name: "AES-CBC",
            length: 128
        }, true, [
            "encrypt",
            "decrypt"
        ]);
        const [iv, cipherText] = encryptedString.split(".");
        const plainTextBuffer = await subtle.decrypt({
            name: "AES-CBC",
            iv: base64ToBuf(iv)
        }, key, base64ToBuf(cipherText));
        return new TextDecoder().decode(plainTextBuffer);
    } catch (e) {
        throw new Error("Failed to decrypt");
    }
}
function toString(input) {
    if (typeof input === "string") return input;
    return JSON.stringify(input);
}
function paddedVersionString(input) {
    if (typeof input === "number") {
        input = input + "";
    }
    if (!input || typeof input !== "string") {
        input = "0";
    }
    // Remove build info and leading `v` if any
    // Split version into parts (both core version numbers and pre-release tags)
    // "v1.2.3-rc.1+build123" -> ["1","2","3","rc","1"]
    const parts = input.replace(/(^v|\+.*$)/g, "").split(/[-.]/);
    // If it's SemVer without a pre-release, add `~` to the end
    // ["1","0","0"] -> ["1","0","0","~"]
    // "~" is the largest ASCII character, so this will make "1.0.0" greater than "1.0.0-beta" for example
    if (parts.length === 3) {
        parts.push("~");
    }
    // Left pad each numeric part with spaces so string comparisons will work ("9">"10", but " 9"<"10")
    // Then, join back together into a single string
    return parts.map((v)=>v.match(/^[0-9]+$/) ? v.padStart(5, " ") : v).join("-");
}
function loadSDKVersion() {
    let version;
    try {
        // @ts-expect-error right-hand value to be replaced by build with string literal
        version = "1.6.1";
    } catch (e) {
        version = "";
    }
    return version;
}
function mergeQueryStrings(oldUrl, newUrl) {
    let currUrl;
    let redirectUrl;
    try {
        currUrl = new URL(oldUrl);
        redirectUrl = new URL(newUrl);
    } catch (e) {
        console.error(`Unable to merge query strings: ${e}`);
        return newUrl;
    }
    currUrl.searchParams.forEach((value, key)=>{
        // skip  if search param already exists in redirectUrl
        if (redirectUrl.searchParams.has(key)) {
            return;
        }
        redirectUrl.searchParams.set(key, value);
    });
    return redirectUrl.toString();
}
function isObj(x) {
    return typeof x === "object" && x !== null;
}
function getAutoExperimentChangeType(exp) {
    if (exp.urlPatterns && exp.variations.some((variation)=>isObj(variation) && "urlRedirect" in variation)) {
        return "redirect";
    } else if (exp.variations.some((variation)=>isObj(variation) && (variation.domMutations || "js" in variation || "css" in variation))) {
        return "visual";
    }
    return "unknown";
}
async function promiseTimeout(promise, timeout) {
    return new Promise((resolve)=>{
        let resolved = false;
        let timer;
        const finish = (data)=>{
            if (resolved) return;
            resolved = true;
            timer && clearTimeout(timer);
            resolve(data || null);
        };
        if (timeout) {
            timer = setTimeout(()=>finish(), timeout);
        }
        promise.then((data)=>finish(data)).catch(()=>finish());
    });
} //# sourceMappingURL=util.mjs.map
}),
"[project]/node_modules/@growthbook/growthbook/dist/esm/feature-repository.mjs [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "clearCache",
    ()=>clearCache,
    "configureCache",
    ()=>configureCache,
    "helpers",
    ()=>helpers,
    "onHidden",
    ()=>onHidden,
    "onVisible",
    ()=>onVisible,
    "refreshFeatures",
    ()=>refreshFeatures,
    "setPolyfills",
    ()=>setPolyfills,
    "startStreaming",
    ()=>startStreaming,
    "unsubscribe",
    ()=>unsubscribe
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@growthbook/growthbook/dist/esm/util.mjs [app-ssr] (ecmascript)");
;
// Config settings
const cacheSettings = {
    // Consider a fetch stale after 1 minute
    staleTTL: 1000 * 60,
    // Max time to keep a fetch in cache (4 hours default)
    maxAge: 1000 * 60 * 60 * 4,
    cacheKey: "gbFeaturesCache",
    backgroundSync: true,
    maxEntries: 10,
    disableIdleStreams: false,
    idleStreamInterval: 20000,
    disableCache: false
};
const polyfills = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPolyfills"])();
const helpers = {
    fetchFeaturesCall: (_ref)=>{
        let { host, clientKey, headers } = _ref;
        return polyfills.fetch(`${host}/api/features/${clientKey}`, {
            headers
        });
    },
    fetchRemoteEvalCall: (_ref2)=>{
        let { host, clientKey, payload, headers } = _ref2;
        const options = {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                ...headers
            },
            body: JSON.stringify(payload)
        };
        return polyfills.fetch(`${host}/api/eval/${clientKey}`, options);
    },
    eventSourceCall: (_ref3)=>{
        let { host, clientKey, headers } = _ref3;
        if (headers) {
            return new polyfills.EventSource(`${host}/sub/${clientKey}`, {
                headers
            });
        }
        return new polyfills.EventSource(`${host}/sub/${clientKey}`);
    },
    startIdleListener: ()=>{
        let idleTimeout;
        const isBrowser = "undefined" !== "undefined" && typeof document !== "undefined";
        if ("TURBOPACK compile-time truthy", 1) return;
        //TURBOPACK unreachable
        ;
        const onVisibilityChange = undefined;
    },
    stopIdleListener: ()=>{
    // No-op, replaced by startIdleListener
    }
};
try {
    if (globalThis.localStorage) {
        polyfills.localStorage = globalThis.localStorage;
    }
} catch (e) {
// Ignore localStorage errors
}
// Global state
const subscribedInstances = new Map();
let cacheInitialized = false;
const cache = new Map();
const activeFetches = new Map();
const streams = new Map();
const supportsSSE = new Set();
function setPolyfills(overrides) {
    Object.assign(polyfills, overrides);
}
function configureCache(overrides) {
    Object.assign(cacheSettings, overrides);
    if (!cacheSettings.backgroundSync) {
        clearAutoRefresh();
    }
}
async function clearCache() {
    cache.clear();
    activeFetches.clear();
    clearAutoRefresh();
    cacheInitialized = false;
    await updatePersistentCache();
}
async function refreshFeatures(_ref4) {
    let { instance, timeout, skipCache, allowStale, backgroundSync } = _ref4;
    if (!backgroundSync) {
        cacheSettings.backgroundSync = false;
    }
    return fetchFeaturesWithCache({
        instance,
        allowStale,
        timeout,
        skipCache
    });
}
// Subscribe a GrowthBook instance to feature changes
function subscribe(instance) {
    const key = getKey(instance);
    const subs = subscribedInstances.get(key) || new Set();
    subs.add(instance);
    subscribedInstances.set(key, subs);
}
function unsubscribe(instance) {
    subscribedInstances.forEach((s)=>s.delete(instance));
}
function onHidden() {
    streams.forEach((channel)=>{
        if (!channel) return;
        channel.state = "idle";
        disableChannel(channel);
    });
}
function onVisible() {
    streams.forEach((channel)=>{
        if (!channel) return;
        if (channel.state !== "idle") return;
        enableChannel(channel);
    });
}
// Private functions
async function updatePersistentCache() {
    try {
        if (!polyfills.localStorage) return;
        await polyfills.localStorage.setItem(cacheSettings.cacheKey, JSON.stringify(Array.from(cache.entries())));
    } catch (e) {
    // Ignore localStorage errors
    }
}
// SWR wrapper for fetching features. May indirectly or directly start SSE streaming.
async function fetchFeaturesWithCache(_ref5) {
    let { instance, allowStale, timeout, skipCache } = _ref5;
    const key = getKey(instance);
    const cacheKey = getCacheKey(instance);
    const now = new Date();
    const minStaleAt = new Date(now.getTime() - cacheSettings.maxAge + cacheSettings.staleTTL);
    await initializeCache();
    const existing = !cacheSettings.disableCache && !skipCache ? cache.get(cacheKey) : undefined;
    if (existing && (allowStale || existing.staleAt > now) && existing.staleAt > minStaleAt) {
        // Restore from cache whether SSE is supported
        if (existing.sse) supportsSSE.add(key);
        // Reload features in the background if stale
        if (existing.staleAt < now) {
            fetchFeatures(instance);
        } else {
            startAutoRefresh(instance);
        }
        return {
            data: existing.data,
            success: true,
            source: "cache"
        };
    } else {
        const res = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["promiseTimeout"])(fetchFeatures(instance), timeout);
        return res || {
            data: null,
            success: false,
            source: "timeout",
            error: new Error("Timeout")
        };
    }
}
function getKey(instance) {
    const [apiHost, clientKey] = instance.getApiInfo();
    return `${apiHost}||${clientKey}`;
}
function getCacheKey(instance) {
    const baseKey = getKey(instance);
    if (!("isRemoteEval" in instance) || !instance.isRemoteEval()) return baseKey;
    const attributes = instance.getAttributes();
    const cacheKeyAttributes = instance.getCacheKeyAttributes() || Object.keys(instance.getAttributes());
    const ca = {};
    cacheKeyAttributes.forEach((key)=>{
        ca[key] = attributes[key];
    });
    const fv = instance.getForcedVariations();
    const url = instance.getUrl();
    return `${baseKey}||${JSON.stringify({
        ca,
        fv,
        url
    })}`;
}
// Populate cache from localStorage (if available)
async function initializeCache() {
    if (cacheInitialized) return;
    cacheInitialized = true;
    try {
        if (polyfills.localStorage) {
            const value = await polyfills.localStorage.getItem(cacheSettings.cacheKey);
            if (!cacheSettings.disableCache && value) {
                const parsed = JSON.parse(value);
                if (parsed && Array.isArray(parsed)) {
                    parsed.forEach((_ref6)=>{
                        let [key, data] = _ref6;
                        cache.set(key, {
                            ...data,
                            staleAt: new Date(data.staleAt)
                        });
                    });
                }
                cleanupCache();
            }
        }
    } catch (e) {
    // Ignore localStorage errors
    }
    if (!cacheSettings.disableIdleStreams) {
        const cleanupFn = helpers.startIdleListener();
        if (cleanupFn) {
            helpers.stopIdleListener = cleanupFn;
        }
    }
}
// Enforce the maxEntries limit
function cleanupCache() {
    const entriesWithTimestamps = Array.from(cache.entries()).map((_ref7)=>{
        let [key, value] = _ref7;
        return {
            key,
            staleAt: value.staleAt.getTime()
        };
    }).sort((a, b)=>a.staleAt - b.staleAt);
    const entriesToRemoveCount = Math.min(Math.max(0, cache.size - cacheSettings.maxEntries), cache.size);
    for(let i = 0; i < entriesToRemoveCount; i++){
        cache.delete(entriesWithTimestamps[i].key);
    }
}
// Called whenever new features are fetched from the API
function onNewFeatureData(key, cacheKey, data) {
    // If contents haven't changed, ignore the update, extend the stale TTL
    const version = data.dateUpdated || "";
    const staleAt = new Date(Date.now() + cacheSettings.staleTTL);
    const existing = !cacheSettings.disableCache ? cache.get(cacheKey) : undefined;
    if (existing && version && existing.version === version) {
        existing.staleAt = staleAt;
        updatePersistentCache();
        return;
    }
    if (!cacheSettings.disableCache) {
        // Update in-memory cache
        cache.set(cacheKey, {
            data,
            version,
            staleAt,
            sse: supportsSSE.has(key)
        });
        cleanupCache();
    }
    // Update local storage (don't await this, just update asynchronously)
    updatePersistentCache();
    // Update features for all subscribed GrowthBook instances
    const instances = subscribedInstances.get(key);
    instances && instances.forEach((instance)=>refreshInstance(instance, data));
}
async function refreshInstance(instance, data) {
    await instance.setPayload(data || instance.getPayload());
}
// Fetch the features payload from helper function or from in-mem injected payload
async function fetchFeatures(instance) {
    const { apiHost, apiRequestHeaders } = instance.getApiHosts();
    const clientKey = instance.getClientKey();
    const remoteEval = "isRemoteEval" in instance && instance.isRemoteEval();
    const key = getKey(instance);
    const cacheKey = getCacheKey(instance);
    let promise = activeFetches.get(cacheKey);
    if (!promise) {
        const fetcher = remoteEval ? helpers.fetchRemoteEvalCall({
            host: apiHost,
            clientKey,
            payload: {
                attributes: instance.getAttributes(),
                forcedVariations: instance.getForcedVariations(),
                forcedFeatures: Array.from(instance.getForcedFeatures().entries()),
                url: instance.getUrl()
            },
            headers: apiRequestHeaders
        }) : helpers.fetchFeaturesCall({
            host: apiHost,
            clientKey,
            headers: apiRequestHeaders
        });
        // TODO: auto-retry if status code indicates a temporary error
        promise = fetcher.then((res)=>{
            if (!res.ok) {
                throw new Error(`HTTP error: ${res.status}`);
            }
            if (res.headers.get("x-sse-support") === "enabled") {
                supportsSSE.add(key);
            }
            return res.json();
        }).then((data)=>{
            onNewFeatureData(key, cacheKey, data);
            startAutoRefresh(instance);
            activeFetches.delete(cacheKey);
            return {
                data,
                success: true,
                source: "network"
            };
        }).catch((e)=>{
            ("TURBOPACK compile-time value", "development") !== "production" && instance.log("Error fetching features", {
                apiHost,
                clientKey,
                error: e ? e.message : null
            });
            activeFetches.delete(cacheKey);
            return {
                data: null,
                source: "error",
                success: false,
                error: e
            };
        });
        activeFetches.set(cacheKey, promise);
    }
    return promise;
}
// Start SSE streaming, listens to feature payload changes and triggers a refresh or re-fetch
function startAutoRefresh(instance) {
    let forceSSE = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    const key = getKey(instance);
    const cacheKey = getCacheKey(instance);
    const { streamingHost, streamingHostRequestHeaders } = instance.getApiHosts();
    const clientKey = instance.getClientKey();
    if (forceSSE) {
        supportsSSE.add(key);
    }
    if (cacheSettings.backgroundSync && supportsSSE.has(key) && polyfills.EventSource) {
        if (streams.has(key)) return;
        const channel = {
            src: null,
            host: streamingHost,
            clientKey,
            headers: streamingHostRequestHeaders,
            cb: (event)=>{
                try {
                    if (event.type === "features-updated") {
                        const instances = subscribedInstances.get(key);
                        instances && instances.forEach((instance)=>{
                            fetchFeatures(instance);
                        });
                    } else if (event.type === "features") {
                        const json = JSON.parse(event.data);
                        onNewFeatureData(key, cacheKey, json);
                    }
                    // Reset error count on success
                    channel.errors = 0;
                } catch (e) {
                    ("TURBOPACK compile-time value", "development") !== "production" && instance.log("SSE Error", {
                        streamingHost,
                        clientKey,
                        error: e ? e.message : null
                    });
                    onSSEError(channel);
                }
            },
            errors: 0,
            state: "active"
        };
        streams.set(key, channel);
        enableChannel(channel);
    }
}
function onSSEError(channel) {
    if (channel.state === "idle") return;
    channel.errors++;
    if (channel.errors > 3 || channel.src && channel.src.readyState === 2) {
        // exponential backoff after 4 errors, with jitter
        const delay = Math.pow(3, channel.errors - 3) * (1000 + Math.random() * 1000);
        disableChannel(channel);
        setTimeout(()=>{
            if ([
                "idle",
                "active"
            ].includes(channel.state)) return;
            enableChannel(channel);
        }, Math.min(delay, 300000)); // 5 minutes max
    }
}
function disableChannel(channel) {
    if (!channel.src) return;
    channel.src.onopen = null;
    channel.src.onerror = null;
    channel.src.close();
    channel.src = null;
    if (channel.state === "active") {
        channel.state = "disabled";
    }
}
function enableChannel(channel) {
    channel.src = helpers.eventSourceCall({
        host: channel.host,
        clientKey: channel.clientKey,
        headers: channel.headers
    });
    channel.state = "active";
    channel.src.addEventListener("features", channel.cb);
    channel.src.addEventListener("features-updated", channel.cb);
    channel.src.onerror = ()=>onSSEError(channel);
    channel.src.onopen = ()=>{
        channel.errors = 0;
    };
}
function destroyChannel(channel, key) {
    disableChannel(channel);
    streams.delete(key);
}
function clearAutoRefresh() {
    // Clear list of which keys are auto-updated
    supportsSSE.clear();
    // Stop listening for any SSE events
    streams.forEach(destroyChannel);
    // Remove all references to GrowthBook instances
    subscribedInstances.clear();
    // Run the idle stream cleanup function
    helpers.stopIdleListener();
}
function startStreaming(instance, options) {
    if (options.streaming) {
        if (!instance.getClientKey()) {
            throw new Error("Must specify clientKey to enable streaming");
        }
        if (options.payload) {
            startAutoRefresh(instance, true);
        }
        subscribe(instance);
    }
} //# sourceMappingURL=feature-repository.mjs.map
}),
"[project]/node_modules/@growthbook/growthbook/dist/esm/mongrule.mjs [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

/* eslint-disable @typescript-eslint/no-explicit-any */ __turbopack_context__.s([
    "evalCondition",
    ()=>evalCondition
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@growthbook/growthbook/dist/esm/util.mjs [app-ssr] (ecmascript)");
;
const _regexCache = {};
function evalCondition(obj, condition, // Must be included for `condition` to correctly evaluate group Operators
savedGroups) {
    savedGroups = savedGroups || {};
    // Condition is an object, keys are either specific operators or object paths
    // values are either arguments for operators or conditions for paths
    for (const [k, v] of Object.entries(condition)){
        switch(k){
            case "$or":
                if (!evalOr(obj, v, savedGroups)) return false;
                break;
            case "$nor":
                if (evalOr(obj, v, savedGroups)) return false;
                break;
            case "$and":
                if (!evalAnd(obj, v, savedGroups)) return false;
                break;
            case "$not":
                if (evalCondition(obj, v, savedGroups)) return false;
                break;
            default:
                if (!evalConditionValue(v, getPath(obj, k), savedGroups)) return false;
        }
    }
    return true;
}
// Return value at dot-separated path of an object
function getPath(obj, path) {
    const parts = path.split(".");
    let current = obj;
    for(let i = 0; i < parts.length; i++){
        if (current && typeof current === "object" && parts[i] in current) {
            current = current[parts[i]];
        } else {
            return null;
        }
    }
    return current;
}
// Transform a regex string into a real RegExp object
function getRegex(regex) {
    if (!_regexCache[regex]) {
        _regexCache[regex] = new RegExp(regex.replace(/([^\\])\//g, "$1\\/"));
    }
    return _regexCache[regex];
}
// Evaluate a single value against a condition
function evalConditionValue(condition, value, savedGroups) {
    // Simple equality comparisons
    if (typeof condition === "string") {
        return value + "" === condition;
    }
    if (typeof condition === "number") {
        return value * 1 === condition;
    }
    if (typeof condition === "boolean") {
        return value !== null && !!value === condition;
    }
    if (condition === null) {
        return value === null;
    }
    if (Array.isArray(condition) || !isOperatorObject(condition)) {
        return JSON.stringify(value) === JSON.stringify(condition);
    }
    // This is a special operator condition and we should evaluate each one separately
    for(const op in condition){
        if (!evalOperatorCondition(op, value, condition[op], savedGroups)) {
            return false;
        }
    }
    return true;
}
// If the object has only keys that start with '$'
function isOperatorObject(obj) {
    const keys = Object.keys(obj);
    return keys.length > 0 && keys.filter((k)=>k[0] === "$").length === keys.length;
}
// Return the data type of a value
function getType(v) {
    if (v === null) return "null";
    if (Array.isArray(v)) return "array";
    const t = typeof v;
    if ([
        "string",
        "number",
        "boolean",
        "object",
        "undefined"
    ].includes(t)) {
        return t;
    }
    return "unknown";
}
// At least one element of actual must match the expected condition/value
function elemMatch(actual, expected, savedGroups) {
    if (!Array.isArray(actual)) return false;
    const check = isOperatorObject(expected) ? (v)=>evalConditionValue(expected, v, savedGroups) : (v)=>evalCondition(v, expected, savedGroups);
    for(let i = 0; i < actual.length; i++){
        if (actual[i] && check(actual[i])) {
            return true;
        }
    }
    return false;
}
function isIn(actual, expected) {
    // Do an intersection if attribute is an array
    if (Array.isArray(actual)) {
        return actual.some((el)=>expected.includes(el));
    }
    return expected.includes(actual);
}
// Evaluate a single operator condition
function evalOperatorCondition(operator, actual, expected, savedGroups) {
    switch(operator){
        case "$veq":
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["paddedVersionString"])(actual) === (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["paddedVersionString"])(expected);
        case "$vne":
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["paddedVersionString"])(actual) !== (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["paddedVersionString"])(expected);
        case "$vgt":
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["paddedVersionString"])(actual) > (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["paddedVersionString"])(expected);
        case "$vgte":
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["paddedVersionString"])(actual) >= (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["paddedVersionString"])(expected);
        case "$vlt":
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["paddedVersionString"])(actual) < (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["paddedVersionString"])(expected);
        case "$vlte":
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["paddedVersionString"])(actual) <= (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["paddedVersionString"])(expected);
        case "$eq":
            return actual === expected;
        case "$ne":
            return actual !== expected;
        case "$lt":
            return actual < expected;
        case "$lte":
            return actual <= expected;
        case "$gt":
            return actual > expected;
        case "$gte":
            return actual >= expected;
        case "$exists":
            // Using `!=` and `==` instead of strict checks so it also matches for undefined
            return expected ? actual != null : actual == null;
        case "$in":
            if (!Array.isArray(expected)) return false;
            return isIn(actual, expected);
        case "$inGroup":
            return isIn(actual, savedGroups[expected] || []);
        case "$notInGroup":
            return !isIn(actual, savedGroups[expected] || []);
        case "$nin":
            if (!Array.isArray(expected)) return false;
            return !isIn(actual, expected);
        case "$not":
            return !evalConditionValue(expected, actual, savedGroups);
        case "$size":
            if (!Array.isArray(actual)) return false;
            return evalConditionValue(expected, actual.length, savedGroups);
        case "$elemMatch":
            return elemMatch(actual, expected, savedGroups);
        case "$all":
            if (!Array.isArray(actual)) return false;
            for(let i = 0; i < expected.length; i++){
                let passed = false;
                for(let j = 0; j < actual.length; j++){
                    if (evalConditionValue(expected[i], actual[j], savedGroups)) {
                        passed = true;
                        break;
                    }
                }
                if (!passed) return false;
            }
            return true;
        case "$regex":
            try {
                return getRegex(expected).test(actual);
            } catch (e) {
                return false;
            }
        case "$type":
            return getType(actual) === expected;
        default:
            console.error("Unknown operator: " + operator);
            return false;
    }
}
// Recursive $or rule
function evalOr(obj, conditions, savedGroups) {
    if (!conditions.length) return true;
    for(let i = 0; i < conditions.length; i++){
        if (evalCondition(obj, conditions[i], savedGroups)) {
            return true;
        }
    }
    return false;
}
// Recursive $and rule
function evalAnd(obj, conditions, savedGroups) {
    for(let i = 0; i < conditions.length; i++){
        if (!evalCondition(obj, conditions[i], savedGroups)) {
            return false;
        }
    }
    return true;
} //# sourceMappingURL=mongrule.mjs.map
}),
"[project]/node_modules/@growthbook/growthbook/dist/esm/core.mjs [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "EVENT_EXPERIMENT_VIEWED",
    ()=>EVENT_EXPERIMENT_VIEWED,
    "EVENT_FEATURE_EVALUATED",
    ()=>EVENT_FEATURE_EVALUATED,
    "decryptPayload",
    ()=>decryptPayload,
    "evalFeature",
    ()=>evalFeature,
    "getAllStickyBucketAssignmentDocs",
    ()=>getAllStickyBucketAssignmentDocs,
    "getApiHosts",
    ()=>getApiHosts,
    "getExperimentDedupeKey",
    ()=>getExperimentDedupeKey,
    "getExperimentResult",
    ()=>getExperimentResult,
    "getHashAttribute",
    ()=>getHashAttribute,
    "getStickyBucketAttributeKey",
    ()=>getStickyBucketAttributeKey,
    "getStickyBucketAttributes",
    ()=>getStickyBucketAttributes,
    "runExperiment",
    ()=>runExperiment
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$mongrule$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@growthbook/growthbook/dist/esm/mongrule.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@growthbook/growthbook/dist/esm/util.mjs [app-ssr] (ecmascript)");
;
;
const EVENT_FEATURE_EVALUATED = "Feature Evaluated";
const EVENT_EXPERIMENT_VIEWED = "Experiment Viewed";
function getForcedFeatureValues(ctx) {
    // Merge user and global values
    const ret = new Map();
    if (ctx.global.forcedFeatureValues) {
        ctx.global.forcedFeatureValues.forEach((v, k)=>ret.set(k, v));
    }
    if (ctx.user.forcedFeatureValues) {
        ctx.user.forcedFeatureValues.forEach((v, k)=>ret.set(k, v));
    }
    return ret;
}
function getForcedVariations(ctx) {
    // Merge user and global values
    if (ctx.global.forcedVariations && ctx.user.forcedVariations) {
        return {
            ...ctx.global.forcedVariations,
            ...ctx.user.forcedVariations
        };
    } else if (ctx.global.forcedVariations) {
        return ctx.global.forcedVariations;
    } else if (ctx.user.forcedVariations) {
        return ctx.user.forcedVariations;
    } else {
        return {};
    }
}
async function safeCall(fn) {
    try {
        await fn();
    } catch (e) {
    // Do nothing
    }
}
function onExperimentViewed(ctx, experiment, result) {
    // Make sure a tracking callback is only fired once per unique experiment
    if (ctx.user.trackedExperiments) {
        const k = getExperimentDedupeKey(experiment, result);
        if (ctx.user.trackedExperiments.has(k)) {
            return [];
        }
        ctx.user.trackedExperiments.add(k);
    }
    if (ctx.user.enableDevMode && ctx.user.devLogs) {
        ctx.user.devLogs.push({
            experiment,
            result,
            timestamp: Date.now().toString(),
            logType: "experiment"
        });
    }
    const calls = [];
    if (ctx.global.trackingCallback) {
        const cb = ctx.global.trackingCallback;
        calls.push(safeCall(()=>cb(experiment, result, ctx.user)));
    }
    if (ctx.user.trackingCallback) {
        const cb = ctx.user.trackingCallback;
        calls.push(safeCall(()=>cb(experiment, result)));
    }
    if (ctx.global.eventLogger) {
        const cb = ctx.global.eventLogger;
        calls.push(safeCall(()=>cb(EVENT_EXPERIMENT_VIEWED, {
                experimentId: experiment.key,
                variationId: result.key,
                hashAttribute: result.hashAttribute,
                hashValue: result.hashValue
            }, ctx.user)));
    }
    return calls;
}
function onFeatureUsage(ctx, key, ret) {
    // Only track a feature once, unless the assigned value changed
    if (ctx.user.trackedFeatureUsage) {
        const stringifiedValue = JSON.stringify(ret.value);
        if (ctx.user.trackedFeatureUsage[key] === stringifiedValue) return;
        ctx.user.trackedFeatureUsage[key] = stringifiedValue;
        if (ctx.user.enableDevMode && ctx.user.devLogs) {
            ctx.user.devLogs.push({
                featureKey: key,
                result: ret,
                timestamp: Date.now().toString(),
                logType: "feature"
            });
        }
    }
    if (ctx.global.onFeatureUsage) {
        const cb = ctx.global.onFeatureUsage;
        safeCall(()=>cb(key, ret, ctx.user));
    }
    if (ctx.user.onFeatureUsage) {
        const cb = ctx.user.onFeatureUsage;
        safeCall(()=>cb(key, ret));
    }
    if (ctx.global.eventLogger) {
        const cb = ctx.global.eventLogger;
        safeCall(()=>cb(EVENT_FEATURE_EVALUATED, {
                feature: key,
                source: ret.source,
                value: ret.value,
                ruleId: ret.source === "defaultValue" ? "$default" : ret.ruleId || "",
                variationId: ret.experimentResult ? ret.experimentResult.key : ""
            }, ctx.user));
    }
}
function evalFeature(id, ctx) {
    if (ctx.stack.evaluatedFeatures.has(id)) {
        ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log(`evalFeature: circular dependency detected: ${ctx.stack.id} -> ${id}`, {
            from: ctx.stack.id,
            to: id
        });
        return getFeatureResult(ctx, id, null, "cyclicPrerequisite");
    }
    ctx.stack.evaluatedFeatures.add(id);
    ctx.stack.id = id;
    // Global override
    const forcedValues = getForcedFeatureValues(ctx);
    if (forcedValues.has(id)) {
        ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("Global override", {
            id,
            value: forcedValues.get(id)
        });
        return getFeatureResult(ctx, id, forcedValues.get(id), "override");
    }
    // Unknown feature id
    if (!ctx.global.features || !ctx.global.features[id]) {
        ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("Unknown feature", {
            id
        });
        return getFeatureResult(ctx, id, null, "unknownFeature");
    }
    // Get the feature
    const feature = ctx.global.features[id];
    // Loop through the rules
    if (feature.rules) {
        const evaluatedFeatures = new Set(ctx.stack.evaluatedFeatures);
        rules: for (const rule of feature.rules){
            // If there are prerequisite flag(s), evaluate them
            if (rule.parentConditions) {
                for (const parentCondition of rule.parentConditions){
                    ctx.stack.evaluatedFeatures = new Set(evaluatedFeatures);
                    const parentResult = evalFeature(parentCondition.id, ctx);
                    // break out for cyclic prerequisites
                    if (parentResult.source === "cyclicPrerequisite") {
                        return getFeatureResult(ctx, id, null, "cyclicPrerequisite");
                    }
                    const evalObj = {
                        value: parentResult.value
                    };
                    const evaled = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$mongrule$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["evalCondition"])(evalObj, parentCondition.condition || {});
                    if (!evaled) {
                        // blocking prerequisite eval failed: feature evaluation fails
                        if (parentCondition.gate) {
                            ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("Feature blocked by prerequisite", {
                                id,
                                rule
                            });
                            return getFeatureResult(ctx, id, null, "prerequisite");
                        }
                        // non-blocking prerequisite eval failed: break out of parentConditions loop, jump to the next rule
                        ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("Skip rule because prerequisite evaluation fails", {
                            id,
                            rule
                        });
                        continue rules;
                    }
                }
            }
            // If there are filters for who is included (e.g. namespaces)
            if (rule.filters && isFilteredOut(rule.filters, ctx)) {
                ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("Skip rule because of filters", {
                    id,
                    rule
                });
                continue;
            }
            // Feature value is being forced
            if ("force" in rule) {
                // If it's a conditional rule, skip if the condition doesn't pass
                if (rule.condition && !conditionPasses(rule.condition, ctx)) {
                    ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("Skip rule because of condition ff", {
                        id,
                        rule
                    });
                    continue;
                }
                // If this is a percentage rollout, skip if not included
                if (!isIncludedInRollout(ctx, rule.seed || id, rule.hashAttribute, ctx.user.saveStickyBucketAssignmentDoc && !rule.disableStickyBucketing ? rule.fallbackAttribute : undefined, rule.range, rule.coverage, rule.hashVersion)) {
                    ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("Skip rule because user not included in rollout", {
                        id,
                        rule
                    });
                    continue;
                }
                ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("Force value from rule", {
                    id,
                    rule
                });
                // If this was a remotely evaluated experiment, fire the tracking callbacks
                if (rule.tracks) {
                    rule.tracks.forEach((t)=>{
                        const calls = onExperimentViewed(ctx, t.experiment, t.result);
                        if (!calls.length && ctx.global.saveDeferredTrack) {
                            ctx.global.saveDeferredTrack({
                                experiment: t.experiment,
                                result: t.result
                            });
                        }
                    });
                }
                return getFeatureResult(ctx, id, rule.force, "force", rule.id);
            }
            if (!rule.variations) {
                ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("Skip invalid rule", {
                    id,
                    rule
                });
                continue;
            }
            // For experiment rules, run an experiment
            const exp = {
                variations: rule.variations,
                key: rule.key || id
            };
            if ("coverage" in rule) exp.coverage = rule.coverage;
            if (rule.weights) exp.weights = rule.weights;
            if (rule.hashAttribute) exp.hashAttribute = rule.hashAttribute;
            if (rule.fallbackAttribute) exp.fallbackAttribute = rule.fallbackAttribute;
            if (rule.disableStickyBucketing) exp.disableStickyBucketing = rule.disableStickyBucketing;
            if (rule.bucketVersion !== undefined) exp.bucketVersion = rule.bucketVersion;
            if (rule.minBucketVersion !== undefined) exp.minBucketVersion = rule.minBucketVersion;
            if (rule.namespace) exp.namespace = rule.namespace;
            if (rule.meta) exp.meta = rule.meta;
            if (rule.ranges) exp.ranges = rule.ranges;
            if (rule.name) exp.name = rule.name;
            if (rule.phase) exp.phase = rule.phase;
            if (rule.seed) exp.seed = rule.seed;
            if (rule.hashVersion) exp.hashVersion = rule.hashVersion;
            if (rule.filters) exp.filters = rule.filters;
            if (rule.condition) exp.condition = rule.condition;
            // Only return a value if the user is part of the experiment
            const { result } = runExperiment(exp, id, ctx);
            ctx.global.onExperimentEval && ctx.global.onExperimentEval(exp, result);
            if (result.inExperiment && !result.passthrough) {
                return getFeatureResult(ctx, id, result.value, "experiment", rule.id, exp, result);
            }
        }
    }
    ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("Use default value", {
        id,
        value: feature.defaultValue
    });
    // Fall back to using the default value
    return getFeatureResult(ctx, id, feature.defaultValue === undefined ? null : feature.defaultValue, "defaultValue");
}
function runExperiment(experiment, featureId, ctx) {
    const key = experiment.key;
    const numVariations = experiment.variations.length;
    // 1. If experiment has less than 2 variations, return immediately
    if (numVariations < 2) {
        ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("Invalid experiment", {
            id: key
        });
        return {
            result: getExperimentResult(ctx, experiment, -1, false, featureId)
        };
    }
    // 2. If the context is disabled, return immediately
    if (ctx.global.enabled === false || ctx.user.enabled === false) {
        ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("Context disabled", {
            id: key
        });
        return {
            result: getExperimentResult(ctx, experiment, -1, false, featureId)
        };
    }
    // 2.5. Merge in experiment overrides from the context
    experiment = mergeOverrides(experiment, ctx);
    // 2.6 New, more powerful URL targeting
    if (experiment.urlPatterns && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isURLTargeted"])(ctx.user.url || "", experiment.urlPatterns)) {
        ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("Skip because of url targeting", {
            id: key
        });
        return {
            result: getExperimentResult(ctx, experiment, -1, false, featureId)
        };
    }
    // 3. If a variation is forced from a querystring, return the forced variation
    const qsOverride = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getQueryStringOverride"])(key, ctx.user.url || "", numVariations);
    if (qsOverride !== null) {
        ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("Force via querystring", {
            id: key,
            variation: qsOverride
        });
        return {
            result: getExperimentResult(ctx, experiment, qsOverride, false, featureId)
        };
    }
    // 4. If a variation is forced in the context, return the forced variation
    const forcedVariations = getForcedVariations(ctx);
    if (key in forcedVariations) {
        const variation = forcedVariations[key];
        ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("Force via dev tools", {
            id: key,
            variation
        });
        return {
            result: getExperimentResult(ctx, experiment, variation, false, featureId)
        };
    }
    // 5. Exclude if a draft experiment or not active
    if (experiment.status === "draft" || experiment.active === false) {
        ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("Skip because inactive", {
            id: key
        });
        return {
            result: getExperimentResult(ctx, experiment, -1, false, featureId)
        };
    }
    // 6. Get the hash attribute and return if empty
    const { hashAttribute, hashValue } = getHashAttribute(ctx, experiment.hashAttribute, ctx.user.saveStickyBucketAssignmentDoc && !experiment.disableStickyBucketing ? experiment.fallbackAttribute : undefined);
    if (!hashValue) {
        ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("Skip because missing hashAttribute", {
            id: key
        });
        return {
            result: getExperimentResult(ctx, experiment, -1, false, featureId)
        };
    }
    let assigned = -1;
    let foundStickyBucket = false;
    let stickyBucketVersionIsBlocked = false;
    if (ctx.user.saveStickyBucketAssignmentDoc && !experiment.disableStickyBucketing) {
        const { variation, versionIsBlocked } = getStickyBucketVariation({
            ctx,
            expKey: experiment.key,
            expBucketVersion: experiment.bucketVersion,
            expHashAttribute: experiment.hashAttribute,
            expFallbackAttribute: experiment.fallbackAttribute,
            expMinBucketVersion: experiment.minBucketVersion,
            expMeta: experiment.meta
        });
        foundStickyBucket = variation >= 0;
        assigned = variation;
        stickyBucketVersionIsBlocked = !!versionIsBlocked;
    }
    // Some checks are not needed if we already have a sticky bucket
    if (!foundStickyBucket) {
        // 7. Exclude if user is filtered out (used to be called "namespace")
        if (experiment.filters) {
            if (isFilteredOut(experiment.filters, ctx)) {
                ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("Skip because of filters", {
                    id: key
                });
                return {
                    result: getExperimentResult(ctx, experiment, -1, false, featureId)
                };
            }
        } else if (experiment.namespace && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["inNamespace"])(hashValue, experiment.namespace)) {
            ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("Skip because of namespace", {
                id: key
            });
            return {
                result: getExperimentResult(ctx, experiment, -1, false, featureId)
            };
        }
        // 7.5. Exclude if experiment.include returns false or throws
        if (experiment.include && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isIncluded"])(experiment.include)) {
            ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("Skip because of include function", {
                id: key
            });
            return {
                result: getExperimentResult(ctx, experiment, -1, false, featureId)
            };
        }
        // 8. Exclude if condition is false
        if (experiment.condition && !conditionPasses(experiment.condition, ctx)) {
            ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("Skip because of condition exp", {
                id: key
            });
            return {
                result: getExperimentResult(ctx, experiment, -1, false, featureId)
            };
        }
        // 8.05. Exclude if prerequisites are not met
        if (experiment.parentConditions) {
            const evaluatedFeatures = new Set(ctx.stack.evaluatedFeatures);
            for (const parentCondition of experiment.parentConditions){
                ctx.stack.evaluatedFeatures = new Set(evaluatedFeatures);
                const parentResult = evalFeature(parentCondition.id, ctx);
                // break out for cyclic prerequisites
                if (parentResult.source === "cyclicPrerequisite") {
                    return {
                        result: getExperimentResult(ctx, experiment, -1, false, featureId)
                    };
                }
                const evalObj = {
                    value: parentResult.value
                };
                if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$mongrule$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["evalCondition"])(evalObj, parentCondition.condition || {})) {
                    ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("Skip because prerequisite evaluation fails", {
                        id: key
                    });
                    return {
                        result: getExperimentResult(ctx, experiment, -1, false, featureId)
                    };
                }
            }
        }
        // 8.1. Exclude if user is not in a required group
        if (experiment.groups && !hasGroupOverlap(experiment.groups, ctx)) {
            ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("Skip because of groups", {
                id: key
            });
            return {
                result: getExperimentResult(ctx, experiment, -1, false, featureId)
            };
        }
    }
    // 8.2. Old style URL targeting
    if (experiment.url && !urlIsValid(experiment.url, ctx)) {
        ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("Skip because of url", {
            id: key
        });
        return {
            result: getExperimentResult(ctx, experiment, -1, false, featureId)
        };
    }
    // 9. Get the variation from the sticky bucket or get bucket ranges and choose variation
    const n = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["hash"])(experiment.seed || key, hashValue, experiment.hashVersion || 1);
    if (n === null) {
        ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("Skip because of invalid hash version", {
            id: key
        });
        return {
            result: getExperimentResult(ctx, experiment, -1, false, featureId)
        };
    }
    if (!foundStickyBucket) {
        const ranges = experiment.ranges || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBucketRanges"])(numVariations, experiment.coverage === undefined ? 1 : experiment.coverage, experiment.weights);
        assigned = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["chooseVariation"])(n, ranges);
    }
    // 9.5 Unenroll if any prior sticky buckets are blocked by version
    if (stickyBucketVersionIsBlocked) {
        ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("Skip because sticky bucket version is blocked", {
            id: key
        });
        return {
            result: getExperimentResult(ctx, experiment, -1, false, featureId, undefined, true)
        };
    }
    // 10. Return if not in experiment
    if (assigned < 0) {
        ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("Skip because of coverage", {
            id: key
        });
        return {
            result: getExperimentResult(ctx, experiment, -1, false, featureId)
        };
    }
    // 11. Experiment has a forced variation
    if ("force" in experiment) {
        ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("Force variation", {
            id: key,
            variation: experiment.force
        });
        return {
            result: getExperimentResult(ctx, experiment, experiment.force === undefined ? -1 : experiment.force, false, featureId)
        };
    }
    // 12. Exclude if in QA mode
    if (ctx.global.qaMode || ctx.user.qaMode) {
        ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("Skip because QA mode", {
            id: key
        });
        return {
            result: getExperimentResult(ctx, experiment, -1, false, featureId)
        };
    }
    // 12.5. Exclude if experiment is stopped
    if (experiment.status === "stopped") {
        ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("Skip because stopped", {
            id: key
        });
        return {
            result: getExperimentResult(ctx, experiment, -1, false, featureId)
        };
    }
    // 13. Build the result object
    const result = getExperimentResult(ctx, experiment, assigned, true, featureId, n, foundStickyBucket);
    // 13.5. Persist sticky bucket
    if (ctx.user.saveStickyBucketAssignmentDoc && !experiment.disableStickyBucketing) {
        const { changed, key: attrKey, doc } = generateStickyBucketAssignmentDoc(ctx, hashAttribute, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toString"])(hashValue), {
            [getStickyBucketExperimentKey(experiment.key, experiment.bucketVersion)]: result.key
        });
        if (changed) {
            // update local docs
            ctx.user.stickyBucketAssignmentDocs = ctx.user.stickyBucketAssignmentDocs || {};
            ctx.user.stickyBucketAssignmentDocs[attrKey] = doc;
            // save doc
            ctx.user.saveStickyBucketAssignmentDoc(doc);
        }
    }
    // 14. Fire the tracking callback(s)
    // Store the promise in case we're awaiting it (ex: browser url redirects)
    const trackingCalls = onExperimentViewed(ctx, experiment, result);
    if (trackingCalls.length === 0 && ctx.global.saveDeferredTrack) {
        ctx.global.saveDeferredTrack({
            experiment,
            result
        });
    }
    const trackingCall = !trackingCalls.length ? undefined : trackingCalls.length === 1 ? trackingCalls[0] : Promise.all(trackingCalls).then(()=>{});
    // 14.1 Keep track of completed changeIds
    "changeId" in experiment && experiment.changeId && ctx.global.recordChangeId && ctx.global.recordChangeId(experiment.changeId);
    // 15. Return the result
    ("TURBOPACK compile-time value", "development") !== "production" && ctx.global.log("In experiment", {
        id: key,
        variation: result.variationId
    });
    return {
        result,
        trackingCall
    };
}
function getFeatureResult(ctx, key, value, source, ruleId, experiment, result) {
    const ret = {
        value,
        on: !!value,
        off: !value,
        source,
        ruleId: ruleId || ""
    };
    if (experiment) ret.experiment = experiment;
    if (result) ret.experimentResult = result;
    // Track the usage of this feature in real-time
    if (source !== "override") {
        onFeatureUsage(ctx, key, ret);
    }
    return ret;
}
function getAttributes(ctx) {
    return {
        ...ctx.user.attributes,
        ...ctx.user.attributeOverrides
    };
}
function conditionPasses(condition, ctx) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$mongrule$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["evalCondition"])(getAttributes(ctx), condition, ctx.global.savedGroups || {});
}
function isFilteredOut(filters, ctx) {
    return filters.some((filter)=>{
        const { hashValue } = getHashAttribute(ctx, filter.attribute);
        if (!hashValue) return true;
        const n = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["hash"])(filter.seed, hashValue, filter.hashVersion || 2);
        if (n === null) return true;
        return !filter.ranges.some((r)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["inRange"])(n, r));
    });
}
function isIncludedInRollout(ctx, seed, hashAttribute, fallbackAttribute, range, coverage, hashVersion) {
    if (!range && coverage === undefined) return true;
    if (!range && coverage === 0) return false;
    const { hashValue } = getHashAttribute(ctx, hashAttribute, fallbackAttribute);
    if (!hashValue) {
        return false;
    }
    const n = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["hash"])(seed, hashValue, hashVersion || 1);
    if (n === null) return false;
    return range ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["inRange"])(n, range) : coverage !== undefined ? n <= coverage : true;
}
function getExperimentResult(ctx, experiment, variationIndex, hashUsed, featureId, bucket, stickyBucketUsed) {
    let inExperiment = true;
    // If assigned variation is not valid, use the baseline and mark the user as not in the experiment
    if (variationIndex < 0 || variationIndex >= experiment.variations.length) {
        variationIndex = 0;
        inExperiment = false;
    }
    const { hashAttribute, hashValue } = getHashAttribute(ctx, experiment.hashAttribute, ctx.user.saveStickyBucketAssignmentDoc && !experiment.disableStickyBucketing ? experiment.fallbackAttribute : undefined);
    const meta = experiment.meta ? experiment.meta[variationIndex] : {};
    const res = {
        key: meta.key || "" + variationIndex,
        featureId,
        inExperiment,
        hashUsed,
        variationId: variationIndex,
        value: experiment.variations[variationIndex],
        hashAttribute,
        hashValue,
        stickyBucketUsed: !!stickyBucketUsed
    };
    if (meta.name) res.name = meta.name;
    if (bucket !== undefined) res.bucket = bucket;
    if (meta.passthrough) res.passthrough = meta.passthrough;
    return res;
}
function mergeOverrides(experiment, ctx) {
    const key = experiment.key;
    const o = ctx.global.overrides;
    if (o && o[key]) {
        experiment = Object.assign({}, experiment, o[key]);
        if (typeof experiment.url === "string") {
            experiment.url = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getUrlRegExp"])(// eslint-disable-next-line
            experiment.url);
        }
    }
    return experiment;
}
function getHashAttribute(ctx, attr, fallback) {
    let hashAttribute = attr || "id";
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    let hashValue = "";
    const attributes = getAttributes(ctx);
    if (attributes[hashAttribute]) {
        hashValue = attributes[hashAttribute];
    }
    // if no match, try fallback
    if (!hashValue && fallback) {
        if (attributes[fallback]) {
            hashValue = attributes[fallback];
        }
        if (hashValue) {
            hashAttribute = fallback;
        }
    }
    return {
        hashAttribute,
        hashValue
    };
}
function urlIsValid(urlRegex, ctx) {
    const url = ctx.user.url;
    if (!url) return false;
    const pathOnly = url.replace(/^https?:\/\//, "").replace(/^[^/]*\//, "/");
    if (urlRegex.test(url)) return true;
    if (urlRegex.test(pathOnly)) return true;
    return false;
}
function hasGroupOverlap(expGroups, ctx) {
    const groups = ctx.global.groups || {};
    for(let i = 0; i < expGroups.length; i++){
        if (groups[expGroups[i]]) return true;
    }
    return false;
}
function getStickyBucketVariation(_ref) {
    let { ctx, expKey, expBucketVersion, expHashAttribute, expFallbackAttribute, expMinBucketVersion, expMeta } = _ref;
    expBucketVersion = expBucketVersion || 0;
    expMinBucketVersion = expMinBucketVersion || 0;
    expHashAttribute = expHashAttribute || "id";
    expMeta = expMeta || [];
    const id = getStickyBucketExperimentKey(expKey, expBucketVersion);
    const assignments = getStickyBucketAssignments(ctx, expHashAttribute, expFallbackAttribute);
    // users with any blocked bucket version (0 to minExperimentBucketVersion) are excluded from the test
    if (expMinBucketVersion > 0) {
        for(let i = 0; i <= expMinBucketVersion; i++){
            const blockedKey = getStickyBucketExperimentKey(expKey, i);
            if (assignments[blockedKey] !== undefined) {
                return {
                    variation: -1,
                    versionIsBlocked: true
                };
            }
        }
    }
    const variationKey = assignments[id];
    if (variationKey === undefined) // no assignment found
    return {
        variation: -1
    };
    const variation = expMeta.findIndex((m)=>m.key === variationKey);
    if (variation < 0) // invalid assignment, treat as "no assignment found"
    return {
        variation: -1
    };
    return {
        variation
    };
}
function getStickyBucketExperimentKey(experimentKey, experimentBucketVersion) {
    experimentBucketVersion = experimentBucketVersion || 0;
    return `${experimentKey}__${experimentBucketVersion}`;
}
function getStickyBucketAttributeKey(attributeName, attributeValue) {
    return `${attributeName}||${attributeValue}`;
}
function getStickyBucketAssignments(ctx, expHashAttribute, expFallbackAttribute) {
    if (!ctx.user.stickyBucketAssignmentDocs) return {};
    const { hashAttribute, hashValue } = getHashAttribute(ctx, expHashAttribute);
    const hashKey = getStickyBucketAttributeKey(hashAttribute, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toString"])(hashValue));
    const { hashAttribute: fallbackAttribute, hashValue: fallbackValue } = getHashAttribute(ctx, expFallbackAttribute);
    const fallbackKey = fallbackValue ? getStickyBucketAttributeKey(fallbackAttribute, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toString"])(fallbackValue)) : null;
    const assignments = {};
    if (fallbackKey && ctx.user.stickyBucketAssignmentDocs[fallbackKey]) {
        Object.assign(assignments, ctx.user.stickyBucketAssignmentDocs[fallbackKey].assignments || {});
    }
    if (ctx.user.stickyBucketAssignmentDocs[hashKey]) {
        Object.assign(assignments, ctx.user.stickyBucketAssignmentDocs[hashKey].assignments || {});
    }
    return assignments;
}
function generateStickyBucketAssignmentDoc(ctx, attributeName, attributeValue, assignments) {
    const key = getStickyBucketAttributeKey(attributeName, attributeValue);
    const existingAssignments = ctx.user.stickyBucketAssignmentDocs && ctx.user.stickyBucketAssignmentDocs[key] ? ctx.user.stickyBucketAssignmentDocs[key].assignments || {} : {};
    const newAssignments = {
        ...existingAssignments,
        ...assignments
    };
    const changed = JSON.stringify(existingAssignments) !== JSON.stringify(newAssignments);
    return {
        key,
        doc: {
            attributeName,
            attributeValue,
            assignments: newAssignments
        },
        changed
    };
}
function deriveStickyBucketIdentifierAttributes(ctx, data) {
    const attributes = new Set();
    const features = data && data.features ? data.features : ctx.global.features || {};
    const experiments = data && data.experiments ? data.experiments : ctx.global.experiments || [];
    Object.keys(features).forEach((id)=>{
        const feature = features[id];
        if (feature.rules) {
            for (const rule of feature.rules){
                if (rule.variations) {
                    attributes.add(rule.hashAttribute || "id");
                    if (rule.fallbackAttribute) {
                        attributes.add(rule.fallbackAttribute);
                    }
                }
            }
        }
    });
    experiments.map((experiment)=>{
        attributes.add(experiment.hashAttribute || "id");
        if (experiment.fallbackAttribute) {
            attributes.add(experiment.fallbackAttribute);
        }
    });
    return Array.from(attributes);
}
async function getAllStickyBucketAssignmentDocs(ctx, stickyBucketService, data) {
    const attributes = getStickyBucketAttributes(ctx, data);
    return stickyBucketService.getAllAssignments(attributes);
}
function getStickyBucketAttributes(ctx, data) {
    const attributes = {};
    const stickyBucketIdentifierAttributes = deriveStickyBucketIdentifierAttributes(ctx, data);
    stickyBucketIdentifierAttributes.forEach((attr)=>{
        const { hashValue } = getHashAttribute(ctx, attr);
        attributes[attr] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toString"])(hashValue);
    });
    return attributes;
}
async function decryptPayload(data, decryptionKey, subtle) {
    data = {
        ...data
    };
    if (data.encryptedFeatures) {
        try {
            data.features = JSON.parse(await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["decrypt"])(data.encryptedFeatures, decryptionKey, subtle));
        } catch (e) {
            console.error(e);
        }
        delete data.encryptedFeatures;
    }
    if (data.encryptedExperiments) {
        try {
            data.experiments = JSON.parse(await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["decrypt"])(data.encryptedExperiments, decryptionKey, subtle));
        } catch (e) {
            console.error(e);
        }
        delete data.encryptedExperiments;
    }
    if (data.encryptedSavedGroups) {
        try {
            data.savedGroups = JSON.parse(await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["decrypt"])(data.encryptedSavedGroups, decryptionKey, subtle));
        } catch (e) {
            console.error(e);
        }
        delete data.encryptedSavedGroups;
    }
    return data;
}
function getApiHosts(options) {
    const defaultHost = options.apiHost || "https://cdn.growthbook.io";
    return {
        apiHost: defaultHost.replace(/\/*$/, ""),
        streamingHost: (options.streamingHost || defaultHost).replace(/\/*$/, ""),
        apiRequestHeaders: options.apiHostRequestHeaders,
        streamingHostRequestHeaders: options.streamingHostRequestHeaders
    };
}
function getExperimentDedupeKey(experiment, result) {
    return result.hashAttribute + result.hashValue + experiment.key + result.variationId;
} //# sourceMappingURL=core.mjs.map
}),
"[project]/node_modules/@growthbook/growthbook/dist/esm/GrowthBook.mjs [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "GrowthBook",
    ()=>GrowthBook,
    "prefetchPayload",
    ()=>prefetchPayload
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$dom$2d$mutator$2f$dist$2f$dom$2d$mutator$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/dom-mutator/dist/dom-mutator.esm.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@growthbook/growthbook/dist/esm/util.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$feature$2d$repository$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@growthbook/growthbook/dist/esm/feature-repository.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$core$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@growthbook/growthbook/dist/esm/core.mjs [app-ssr] (ecmascript)");
;
;
;
;
const isBrowser = "undefined" !== "undefined" && typeof document !== "undefined";
const SDK_VERSION = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["loadSDKVersion"])();
class GrowthBook {
    // context is technically private, but some tools depend on it so we can't mangle the name
    // Properties and methods that start with "_" are mangled by Terser (saves ~150 bytes)
    constructor(options){
        options = options || {};
        // These properties are all initialized in the constructor instead of above
        // This saves ~80 bytes in the final output
        this.version = SDK_VERSION;
        this._options = this.context = options;
        this._renderer = options.renderer || null;
        this._trackedExperiments = new Set();
        this._completedChangeIds = new Set();
        this._trackedFeatures = {};
        this.debug = !!options.debug;
        this._subscriptions = new Set();
        this.ready = false;
        this._assigned = new Map();
        this._activeAutoExperiments = new Map();
        this._triggeredExpKeys = new Set();
        this._initialized = false;
        this._redirectedUrl = "";
        this._deferredTrackingCalls = new Map();
        this._autoExperimentsAllowed = !options.disableExperimentsOnLoad;
        this._destroyCallbacks = [];
        this.logs = [];
        this.log = this.log.bind(this);
        this._saveDeferredTrack = this._saveDeferredTrack.bind(this);
        this._fireSubscriptions = this._fireSubscriptions.bind(this);
        this._recordChangedId = this._recordChangedId.bind(this);
        if (options.remoteEval) {
            if (options.decryptionKey) {
                throw new Error("Encryption is not available for remoteEval");
            }
            if (!options.clientKey) {
                throw new Error("Missing clientKey");
            }
            let isGbHost = false;
            try {
                isGbHost = !!new URL(options.apiHost || "").hostname.match(/growthbook\.io$/i);
            } catch (e) {
            // ignore invalid URLs
            }
            if (isGbHost) {
                throw new Error("Cannot use remoteEval on GrowthBook Cloud");
            }
        } else {
            if (options.cacheKeyAttributes) {
                throw new Error("cacheKeyAttributes are only used for remoteEval");
            }
        }
        if (options.stickyBucketService) {
            const s = options.stickyBucketService;
            this._saveStickyBucketAssignmentDoc = (doc)=>{
                return s.saveAssignments(doc);
            };
        }
        if (options.plugins) {
            for (const plugin of options.plugins){
                plugin(this);
            }
        }
        if (options.features) {
            this.ready = true;
        }
        if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
        ;
        if (options.experiments) {
            this.ready = true;
            this._updateAllAutoExperiments();
        }
        // Hydrate sticky bucket service
        if (this._options.stickyBucketService && this._options.stickyBucketAssignmentDocs) {
            for(const key in this._options.stickyBucketAssignmentDocs){
                const doc = this._options.stickyBucketAssignmentDocs[key];
                if (doc) {
                    this._options.stickyBucketService.saveAssignments(doc).catch(()=>{
                    // Ignore hydration errors
                    });
                }
            }
        }
        // Legacy - passing in features/experiments into the constructor instead of using init
        if (this.ready) {
            this.refreshStickyBuckets(this.getPayload());
        }
    }
    async setPayload(payload) {
        this._payload = payload;
        const data = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$core$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["decryptPayload"])(payload, this._options.decryptionKey);
        this._decryptedPayload = data;
        await this.refreshStickyBuckets(data);
        if (data.features) {
            this._options.features = data.features;
        }
        if (data.savedGroups) {
            this._options.savedGroups = data.savedGroups;
        }
        if (data.experiments) {
            this._options.experiments = data.experiments;
            this._updateAllAutoExperiments();
        }
        this.ready = true;
        this._render();
    }
    initSync(options) {
        this._initialized = true;
        const payload = options.payload;
        if (payload.encryptedExperiments || payload.encryptedFeatures) {
            throw new Error("initSync does not support encrypted payloads");
        }
        if (this._options.stickyBucketService && !this._options.stickyBucketAssignmentDocs) {
            this._options.stickyBucketAssignmentDocs = this.generateStickyBucketAssignmentDocsSync(this._options.stickyBucketService, payload);
        }
        this._payload = payload;
        this._decryptedPayload = payload;
        if (payload.features) {
            this._options.features = payload.features;
        }
        if (payload.experiments) {
            this._options.experiments = payload.experiments;
            this._updateAllAutoExperiments();
        }
        this.ready = true;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$feature$2d$repository$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["startStreaming"])(this, options);
        return this;
    }
    async init(options) {
        this._initialized = true;
        options = options || {};
        if (options.cacheSettings) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$feature$2d$repository$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["configureCache"])(options.cacheSettings);
        }
        if (options.payload) {
            await this.setPayload(options.payload);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$feature$2d$repository$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["startStreaming"])(this, options);
            return {
                success: true,
                source: "init"
            };
        } else {
            const { data, ...res } = await this._refresh({
                ...options,
                allowStale: true
            });
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$feature$2d$repository$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["startStreaming"])(this, options);
            await this.setPayload(data || {});
            return res;
        }
    }
    /** @deprecated Use {@link init} */ async loadFeatures(options) {
        options = options || {};
        await this.init({
            skipCache: options.skipCache,
            timeout: options.timeout,
            streaming: (this._options.backgroundSync ?? true) && (options.autoRefresh || this._options.subscribeToChanges)
        });
    }
    async refreshFeatures(options) {
        const res = await this._refresh({
            ...options || {},
            allowStale: false
        });
        if (res.data) {
            await this.setPayload(res.data);
        }
    }
    getApiInfo() {
        return [
            this.getApiHosts().apiHost,
            this.getClientKey()
        ];
    }
    getApiHosts() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$core$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getApiHosts"])(this._options);
    }
    getClientKey() {
        return this._options.clientKey || "";
    }
    getPayload() {
        return this._payload || {
            features: this.getFeatures(),
            experiments: this.getExperiments()
        };
    }
    getDecryptedPayload() {
        return this._decryptedPayload || this.getPayload();
    }
    isRemoteEval() {
        return this._options.remoteEval || false;
    }
    getCacheKeyAttributes() {
        return this._options.cacheKeyAttributes;
    }
    async _refresh(_ref) {
        let { timeout, skipCache, allowStale, streaming } = _ref;
        if (!this._options.clientKey) {
            throw new Error("Missing clientKey");
        }
        // Trigger refresh in feature repository
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$feature$2d$repository$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["refreshFeatures"])({
            instance: this,
            timeout,
            skipCache: skipCache || this._options.disableCache,
            allowStale,
            backgroundSync: streaming ?? this._options.backgroundSync ?? true
        });
    }
    _render() {
        if (this._renderer) {
            try {
                this._renderer();
            } catch (e) {
                console.error("Failed to render", e);
            }
        }
    }
    /** @deprecated Use {@link setPayload} */ setFeatures(features) {
        this._options.features = features;
        this.ready = true;
        this._render();
    }
    /** @deprecated Use {@link setPayload} */ async setEncryptedFeatures(encryptedString, decryptionKey, subtle) {
        const featuresJSON = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["decrypt"])(encryptedString, decryptionKey || this._options.decryptionKey, subtle);
        this.setFeatures(JSON.parse(featuresJSON));
    }
    /** @deprecated Use {@link setPayload} */ setExperiments(experiments) {
        this._options.experiments = experiments;
        this.ready = true;
        this._updateAllAutoExperiments();
    }
    /** @deprecated Use {@link setPayload} */ async setEncryptedExperiments(encryptedString, decryptionKey, subtle) {
        const experimentsJSON = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["decrypt"])(encryptedString, decryptionKey || this._options.decryptionKey, subtle);
        this.setExperiments(JSON.parse(experimentsJSON));
    }
    async setAttributes(attributes) {
        this._options.attributes = attributes;
        if (this._options.stickyBucketService) {
            await this.refreshStickyBuckets();
        }
        if (this._options.remoteEval) {
            await this._refreshForRemoteEval();
            return;
        }
        this._render();
        this._updateAllAutoExperiments();
    }
    async updateAttributes(attributes) {
        return this.setAttributes({
            ...this._options.attributes,
            ...attributes
        });
    }
    async setAttributeOverrides(overrides) {
        this._options.attributeOverrides = overrides;
        if (this._options.stickyBucketService) {
            await this.refreshStickyBuckets();
        }
        if (this._options.remoteEval) {
            await this._refreshForRemoteEval();
            return;
        }
        this._render();
        this._updateAllAutoExperiments();
    }
    async setForcedVariations(vars) {
        this._options.forcedVariations = vars || {};
        if (this._options.remoteEval) {
            await this._refreshForRemoteEval();
            return;
        }
        this._render();
        this._updateAllAutoExperiments();
    }
    // eslint-disable-next-line
    setForcedFeatures(map) {
        this._options.forcedFeatureValues = map;
        this._render();
    }
    async setURL(url) {
        if (url === this._options.url) return;
        this._options.url = url;
        this._redirectedUrl = "";
        if (this._options.remoteEval) {
            await this._refreshForRemoteEval();
            this._updateAllAutoExperiments(true);
            return;
        }
        this._updateAllAutoExperiments(true);
    }
    getAttributes() {
        return {
            ...this._options.attributes,
            ...this._options.attributeOverrides
        };
    }
    getForcedVariations() {
        return this._options.forcedVariations || {};
    }
    getForcedFeatures() {
        // eslint-disable-next-line
        return this._options.forcedFeatureValues || new Map();
    }
    getStickyBucketAssignmentDocs() {
        return this._options.stickyBucketAssignmentDocs || {};
    }
    getUrl() {
        return this._options.url || "";
    }
    getFeatures() {
        return this._options.features || {};
    }
    getExperiments() {
        return this._options.experiments || [];
    }
    getCompletedChangeIds() {
        return Array.from(this._completedChangeIds);
    }
    subscribe(cb) {
        this._subscriptions.add(cb);
        return ()=>{
            this._subscriptions.delete(cb);
        };
    }
    async _refreshForRemoteEval() {
        if (!this._options.remoteEval) return;
        if (!this._initialized) return;
        const res = await this._refresh({
            allowStale: false
        });
        if (res.data) {
            await this.setPayload(res.data);
        }
    }
    getAllResults() {
        return new Map(this._assigned);
    }
    onDestroy(cb) {
        this._destroyCallbacks.push(cb);
    }
    isDestroyed() {
        return !!this._destroyed;
    }
    destroy() {
        this._destroyed = true;
        // Custom callbacks
        // Do this first in case it needs access to the below data that is cleared
        this._destroyCallbacks.forEach((cb)=>{
            try {
                cb();
            } catch (e) {
                console.error(e);
            }
        });
        // Release references to save memory
        this._subscriptions.clear();
        this._assigned.clear();
        this._trackedExperiments.clear();
        this._completedChangeIds.clear();
        this._deferredTrackingCalls.clear();
        this._trackedFeatures = {};
        this._destroyCallbacks = [];
        this._payload = undefined;
        this._saveStickyBucketAssignmentDoc = undefined;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$feature$2d$repository$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unsubscribe"])(this);
        this.logs = [];
        if (isBrowser && window._growthbook === this) //TURBOPACK unreachable
        ;
        // Undo any active auto experiments
        this._activeAutoExperiments.forEach((exp)=>{
            exp.undo();
        });
        this._activeAutoExperiments.clear();
        this._triggeredExpKeys.clear();
    }
    setRenderer(renderer) {
        this._renderer = renderer;
    }
    forceVariation(key, variation) {
        this._options.forcedVariations = this._options.forcedVariations || {};
        this._options.forcedVariations[key] = variation;
        if (this._options.remoteEval) {
            this._refreshForRemoteEval();
            return;
        }
        this._updateAllAutoExperiments();
        this._render();
    }
    run(experiment) {
        const { result } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$core$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["runExperiment"])(experiment, null, this._getEvalContext());
        this._fireSubscriptions(experiment, result);
        return result;
    }
    triggerExperiment(key) {
        this._triggeredExpKeys.add(key);
        if (!this._options.experiments) return null;
        const experiments = this._options.experiments.filter((exp)=>exp.key === key);
        return experiments.map((exp)=>{
            return this._runAutoExperiment(exp);
        }).filter((res)=>res !== null);
    }
    triggerAutoExperiments() {
        this._autoExperimentsAllowed = true;
        this._updateAllAutoExperiments(true);
    }
    _getEvalContext() {
        return {
            user: this._getUserContext(),
            global: this._getGlobalContext(),
            stack: {
                evaluatedFeatures: new Set()
            }
        };
    }
    _getUserContext() {
        return {
            attributes: this._options.user ? {
                ...this._options.user,
                ...this._options.attributes
            } : this._options.attributes,
            enableDevMode: this._options.enableDevMode,
            blockedChangeIds: this._options.blockedChangeIds,
            stickyBucketAssignmentDocs: this._options.stickyBucketAssignmentDocs,
            url: this._getContextUrl(),
            forcedVariations: this._options.forcedVariations,
            forcedFeatureValues: this._options.forcedFeatureValues,
            attributeOverrides: this._options.attributeOverrides,
            saveStickyBucketAssignmentDoc: this._saveStickyBucketAssignmentDoc,
            trackingCallback: this._options.trackingCallback,
            onFeatureUsage: this._options.onFeatureUsage,
            devLogs: this.logs,
            trackedExperiments: this._trackedExperiments,
            trackedFeatureUsage: this._trackedFeatures
        };
    }
    _getGlobalContext() {
        return {
            features: this._options.features,
            experiments: this._options.experiments,
            log: this.log,
            enabled: this._options.enabled,
            qaMode: this._options.qaMode,
            savedGroups: this._options.savedGroups,
            groups: this._options.groups,
            overrides: this._options.overrides,
            onExperimentEval: this._subscriptions.size > 0 ? this._fireSubscriptions : undefined,
            recordChangeId: this._recordChangedId,
            saveDeferredTrack: this._saveDeferredTrack,
            eventLogger: this._options.eventLogger
        };
    }
    _runAutoExperiment(experiment, forceRerun) {
        const existing = this._activeAutoExperiments.get(experiment);
        // If this is a manual experiment and it's not already running, skip
        if (experiment.manual && !this._triggeredExpKeys.has(experiment.key) && !existing) return null;
        // Check if this particular experiment is blocked by options settings
        // For example, if all visualEditor experiments are disabled
        const isBlocked = this._isAutoExperimentBlockedByContext(experiment);
        if (isBlocked) {
            ("TURBOPACK compile-time value", "development") !== "production" && this.log("Auto experiment blocked", {
                id: experiment.key
            });
        }
        let result;
        let trackingCall;
        // Run the experiment (if blocked exclude)
        if (isBlocked) {
            result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$core$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getExperimentResult"])(this._getEvalContext(), experiment, -1, false, "");
        } else {
            ({ result, trackingCall } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$core$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["runExperiment"])(experiment, null, this._getEvalContext()));
            this._fireSubscriptions(experiment, result);
        }
        // A hash to quickly tell if the assigned value changed
        const valueHash = JSON.stringify(result.value);
        // If the changes are already active, no need to re-apply them
        if (!forceRerun && result.inExperiment && existing && existing.valueHash === valueHash) {
            return result;
        }
        // Undo any existing changes
        if (existing) this._undoActiveAutoExperiment(experiment);
        // Apply new changes
        if (result.inExperiment) {
            const changeType = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getAutoExperimentChangeType"])(experiment);
            if (changeType === "redirect" && result.value.urlRedirect && experiment.urlPatterns) {
                const url = experiment.persistQueryString ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["mergeQueryStrings"])(this._getContextUrl(), result.value.urlRedirect) : result.value.urlRedirect;
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isURLTargeted"])(url, experiment.urlPatterns)) {
                    this.log("Skipping redirect because original URL matches redirect URL", {
                        id: experiment.key
                    });
                    return result;
                }
                this._redirectedUrl = url;
                const { navigate, delay } = this._getNavigateFunction();
                if (navigate) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        try {
                            navigate(url);
                        } catch (e) {
                            console.error(e);
                        }
                    }
                }
            } else if (changeType === "visual") {
                const undo = this._options.applyDomChangesCallback ? this._options.applyDomChangesCallback(result.value) : this._applyDOMChanges(result.value);
                if (undo) {
                    this._activeAutoExperiments.set(experiment, {
                        undo,
                        valueHash
                    });
                }
            }
        }
        return result;
    }
    _undoActiveAutoExperiment(exp) {
        const data = this._activeAutoExperiments.get(exp);
        if (data) {
            data.undo();
            this._activeAutoExperiments.delete(exp);
        }
    }
    _updateAllAutoExperiments(forceRerun) {
        if (!this._autoExperimentsAllowed) return;
        const experiments = this._options.experiments || [];
        // Stop any experiments that are no longer defined
        const keys = new Set(experiments);
        this._activeAutoExperiments.forEach((v, k)=>{
            if (!keys.has(k)) {
                v.undo();
                this._activeAutoExperiments.delete(k);
            }
        });
        // Re-run all new/updated experiments
        for (const exp of experiments){
            const result = this._runAutoExperiment(exp, forceRerun);
            // Once you're in a redirect experiment, break out of the loop and don't run any further experiments
            if (result !== null && result !== void 0 && result.inExperiment && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getAutoExperimentChangeType"])(exp) === "redirect") {
                break;
            }
        }
    }
    _fireSubscriptions(experiment, result) {
        const key = experiment.key;
        // If assigned variation has changed, fire subscriptions
        const prev = this._assigned.get(key);
        // TODO: what if the experiment definition has changed?
        if (!prev || prev.result.inExperiment !== result.inExperiment || prev.result.variationId !== result.variationId) {
            this._assigned.set(key, {
                experiment,
                result
            });
            this._subscriptions.forEach((cb)=>{
                try {
                    cb(experiment, result);
                } catch (e) {
                    console.error(e);
                }
            });
        }
    }
    _recordChangedId(id) {
        this._completedChangeIds.add(id);
    }
    isOn(key) {
        return this.evalFeature(key).on;
    }
    isOff(key) {
        return this.evalFeature(key).off;
    }
    getFeatureValue(key, defaultValue) {
        const value = this.evalFeature(key).value;
        return value === null ? defaultValue : value;
    }
    /**
   * @deprecated Use {@link evalFeature}
   * @param id
   */ // eslint-disable-next-line
    feature(id) {
        return this.evalFeature(id);
    }
    evalFeature(id) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$core$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["evalFeature"])(id, this._getEvalContext());
    }
    log(msg, ctx) {
        if (!this.debug) return;
        if (this._options.log) this._options.log(msg, ctx);
        else console.log(msg, ctx);
    }
    getDeferredTrackingCalls() {
        return Array.from(this._deferredTrackingCalls.values());
    }
    setDeferredTrackingCalls(calls) {
        this._deferredTrackingCalls = new Map(calls.filter((c)=>c && c.experiment && c.result).map((c)=>{
            return [
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$core$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getExperimentDedupeKey"])(c.experiment, c.result),
                c
            ];
        }));
    }
    async fireDeferredTrackingCalls() {
        if (!this._options.trackingCallback) return;
        const promises = [];
        this._deferredTrackingCalls.forEach((call)=>{
            if (!call || !call.experiment || !call.result) {
                console.error("Invalid deferred tracking call", {
                    call: call
                });
            } else {
                promises.push(this._options.trackingCallback(call.experiment, call.result));
            }
        });
        this._deferredTrackingCalls.clear();
        await Promise.all(promises);
    }
    setTrackingCallback(callback) {
        this._options.trackingCallback = callback;
        this.fireDeferredTrackingCalls();
    }
    setEventLogger(logger) {
        this._options.eventLogger = logger;
    }
    async logEvent(eventName, properties) {
        if (this._destroyed) {
            console.error("Cannot log event to destroyed GrowthBook instance");
            return;
        }
        if (this._options.enableDevMode) {
            this.logs.push({
                eventName,
                properties,
                timestamp: Date.now().toString(),
                logType: "event"
            });
        }
        if (this._options.eventLogger) {
            try {
                await this._options.eventLogger(eventName, properties || {}, this._getUserContext());
            } catch (e) {
                console.error(e);
            }
        } else {
            console.error("No event logger configured");
        }
    }
    _saveDeferredTrack(data) {
        this._deferredTrackingCalls.set((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$core$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getExperimentDedupeKey"])(data.experiment, data.result), data);
    }
    _getContextUrl() {
        return this._options.url || (("TURBOPACK compile-time falsy", 0) ? "TURBOPACK unreachable" : "");
    }
    _isAutoExperimentBlockedByContext(experiment) {
        const changeType = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$util$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getAutoExperimentChangeType"])(experiment);
        if (changeType === "visual") {
            if (this._options.disableVisualExperiments) return true;
            if (this._options.disableJsInjection) {
                if (experiment.variations.some((v)=>v.js)) {
                    return true;
                }
            }
        } else if (changeType === "redirect") {
            if (this._options.disableUrlRedirectExperiments) return true;
            // Validate URLs
            try {
                const current = new URL(this._getContextUrl());
                for (const v of experiment.variations){
                    if (!v || !v.urlRedirect) continue;
                    const url = new URL(v.urlRedirect);
                    // If we're blocking cross origin redirects, block if the protocol or host is different
                    if (this._options.disableCrossOriginUrlRedirectExperiments) {
                        if (url.protocol !== current.protocol) return true;
                        if (url.host !== current.host) return true;
                    }
                }
            } catch (e) {
                // Problem parsing one of the URLs
                this.log("Error parsing current or redirect URL", {
                    id: experiment.key,
                    error: e
                });
                return true;
            }
        } else {
            // Block any unknown changeTypes
            return true;
        }
        if (experiment.changeId && (this._options.blockedChangeIds || []).includes(experiment.changeId)) {
            return true;
        }
        return false;
    }
    getRedirectUrl() {
        return this._redirectedUrl;
    }
    _getNavigateFunction() {
        if (this._options.navigate) {
            return {
                navigate: this._options.navigate,
                delay: 0
            };
        } else if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
        ;
        return {
            navigate: null,
            delay: 0
        };
    }
    _applyDOMChanges(changes) {
        if ("TURBOPACK compile-time truthy", 1) return;
        //TURBOPACK unreachable
        ;
        const undo = undefined;
    }
    async refreshStickyBuckets(data) {
        if (this._options.stickyBucketService) {
            const ctx = this._getEvalContext();
            const docs = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$core$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getAllStickyBucketAssignmentDocs"])(ctx, this._options.stickyBucketService, data);
            this._options.stickyBucketAssignmentDocs = docs;
        }
    }
    generateStickyBucketAssignmentDocsSync(stickyBucketService, payload) {
        if (!("getAllAssignmentsSync" in stickyBucketService)) {
            console.error("generating StickyBucketAssignmentDocs docs requires StickyBucketServiceSync");
            return;
        }
        const ctx = this._getEvalContext();
        const attributes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$core$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getStickyBucketAttributes"])(ctx, payload);
        return stickyBucketService.getAllAssignmentsSync(attributes);
    }
    inDevMode() {
        return !!this._options.enableDevMode;
    }
}
async function prefetchPayload(options) {
    // Create a temporary instance, just to fetch the payload
    const instance = new GrowthBook(options);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$feature$2d$repository$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["refreshFeatures"])({
        instance,
        skipCache: options.skipCache,
        allowStale: false,
        backgroundSync: options.streaming
    });
    instance.destroy();
} //# sourceMappingURL=GrowthBook.mjs.map
}),
"[project]/node_modules/@growthbook/growthbook-react/dist/esm/index.js [app-ssr] (ecmascript) <locals>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "FeatureString",
    ()=>FeatureString,
    "FeaturesReady",
    ()=>FeaturesReady,
    "GrowthBookContext",
    ()=>GrowthBookContext,
    "GrowthBookProvider",
    ()=>GrowthBookProvider,
    "IfFeatureEnabled",
    ()=>IfFeatureEnabled,
    "getGrowthBookSSRData",
    ()=>getGrowthBookSSRData,
    "useExperiment",
    ()=>useExperiment,
    "useFeature",
    ()=>useFeature,
    "useFeatureIsOn",
    ()=>useFeatureIsOn,
    "useFeatureValue",
    ()=>useFeatureValue,
    "useGrowthBook",
    ()=>useGrowthBook,
    "useGrowthBookSSR",
    ()=>useGrowthBookSSR,
    "withRunExperiment",
    ()=>withRunExperiment
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$GrowthBook$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@growthbook/growthbook/dist/esm/GrowthBook.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
;
;
;
function _extends() {
    return _extends = ("TURBOPACK compile-time truthy", 1) ? Object.assign.bind() : "TURBOPACK unreachable", _extends.apply(null, arguments);
}
/** @deprecated */ const GrowthBookContext = /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createContext"]({});
/** @deprecated */ async function getGrowthBookSSRData(context) {
    // Server-side GrowthBook instance
    const gb = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$growthbook$2f$growthbook$2f$dist$2f$esm$2f$GrowthBook$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["GrowthBook"]({
        ...context
    });
    // Load feature flags from network if needed
    if (context.clientKey) {
        await gb.init();
    }
    const data = {
        attributes: gb.getAttributes(),
        features: gb.getFeatures()
    };
    gb.destroy();
    return data;
}
/** @deprecated */ function useGrowthBookSSR(data) {
    const gb = useGrowthBook();
    // Only do this once to avoid infinite loops
    const isFirst = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useRef"](true);
    if (gb && isFirst.current) {
        gb.setFeatures(data.features);
        gb.setAttributes(data.attributes);
        isFirst.current = false;
    }
}
function useExperiment(exp) {
    const { growthbook } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useContext"](GrowthBookContext);
    return growthbook.run(exp);
}
function useFeature(id) {
    const growthbook = useGrowthBook();
    return growthbook.evalFeature(id);
}
function useFeatureIsOn(id) {
    const growthbook = useGrowthBook();
    return growthbook.isOn(id);
}
function useFeatureValue(id, fallback) {
    const growthbook = useGrowthBook();
    return growthbook.getFeatureValue(id, fallback);
}
function useGrowthBook() {
    const { growthbook } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useContext"](GrowthBookContext);
    if (!growthbook) {
        throw new Error("Missing or invalid GrowthBookProvider");
    }
    return growthbook;
}
function FeaturesReady({ children, timeout, fallback }) {
    const gb = useGrowthBook();
    const [hitTimeout, setHitTimeout] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"](false);
    const ready = gb ? gb.ready : false;
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"](()=>{
        if (timeout && !ready) {
            const timer = setTimeout(()=>{
                gb && gb.log("FeaturesReady timed out waiting for features to load", {
                    timeout
                });
                setHitTimeout(true);
            }, timeout);
            return ()=>clearTimeout(timer);
        }
    }, [
        timeout,
        ready,
        gb
    ]);
    return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createElement"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Fragment"], null, ready || hitTimeout ? children : fallback || null);
}
function IfFeatureEnabled({ children, feature }) {
    return useFeature(feature).on ? /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createElement"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Fragment"], null, children) : null;
}
function FeatureString(props) {
    const value = useFeature(props.feature).value;
    if (value !== null) {
        return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createElement"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Fragment"], null, value);
    }
    return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createElement"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Fragment"], null, props.default);
}
const withRunExperiment = (Component)=>{
    // eslint-disable-next-line
    const withRunExperimentWrapper = (props)=>/*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createElement"](GrowthBookContext.Consumer, null, ({ growthbook })=>{
            return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createElement"](Component, _extends({}, props, {
                runExperiment: (exp)=>growthbook.run(exp)
            }));
        });
    return withRunExperimentWrapper;
};
withRunExperiment.displayName = "WithRunExperiment";
const GrowthBookProvider = ({ children, growthbook })=>{
    // Tell growthbook how to re-render our app (for dev mode integration)
    // eslint-disable-next-line
    const [_, setRenderCount] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"](0);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"](()=>{
        if (!growthbook || !growthbook.setRenderer) return;
        growthbook.setRenderer(()=>{
            setRenderCount((v)=>v + 1);
        });
        return ()=>{
            growthbook.setRenderer(()=>{
            // do nothing
            });
        };
    }, [
        growthbook
    ]);
    return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createElement"](GrowthBookContext.Provider, {
        value: {
            growthbook
        }
    }, children);
};
;
 //# sourceMappingURL=index.js.map
}),
"[project]/node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "QueryClientContext",
    ()=>QueryClientContext,
    "QueryClientProvider",
    ()=>QueryClientProvider,
    "useQueryClient",
    ()=>useQueryClient
]);
// src/QueryClientProvider.tsx
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js [app-ssr] (ecmascript)");
"use client";
;
;
var QueryClientContext = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createContext"](void 0);
var useQueryClient = (queryClient)=>{
    const client = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useContext"](QueryClientContext);
    if (queryClient) {
        return queryClient;
    }
    if (!client) {
        throw new Error("No QueryClient set, use QueryClientProvider to set one");
    }
    return client;
};
var QueryClientProvider = ({ client, children })=>{
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"](()=>{
        client.mount();
        return ()=>{
            client.unmount();
        };
    }, [
        client
    ]);
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(QueryClientContext.Provider, {
        value: client,
        children
    });
};
;
 //# sourceMappingURL=QueryClientProvider.js.map
}),
"[project]/node_modules/@tanstack/query-core/build/modern/timeoutManager.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/timeoutManager.ts
__turbopack_context__.s([
    "TimeoutManager",
    ()=>TimeoutManager,
    "defaultTimeoutProvider",
    ()=>defaultTimeoutProvider,
    "systemSetTimeoutZero",
    ()=>systemSetTimeoutZero,
    "timeoutManager",
    ()=>timeoutManager
]);
var defaultTimeoutProvider = {
    // We need the wrapper function syntax below instead of direct references to
    // global setTimeout etc.
    //
    // BAD: `setTimeout: setTimeout`
    // GOOD: `setTimeout: (cb, delay) => setTimeout(cb, delay)`
    //
    // If we use direct references here, then anything that wants to spy on or
    // replace the global setTimeout (like tests) won't work since we'll already
    // have a hard reference to the original implementation at the time when this
    // file was imported.
    setTimeout: (callback, delay)=>setTimeout(callback, delay),
    clearTimeout: (timeoutId)=>clearTimeout(timeoutId),
    setInterval: (callback, delay)=>setInterval(callback, delay),
    clearInterval: (intervalId)=>clearInterval(intervalId)
};
var TimeoutManager = class {
    // We cannot have TimeoutManager<T> as we must instantiate it with a concrete
    // type at app boot; and if we leave that type, then any new timer provider
    // would need to support ReturnType<typeof setTimeout>, which is infeasible.
    //
    // We settle for type safety for the TimeoutProvider type, and accept that
    // this class is unsafe internally to allow for extension.
    #provider = defaultTimeoutProvider;
    #providerCalled = false;
    setTimeoutProvider(provider) {
        if ("TURBOPACK compile-time truthy", 1) {
            if (this.#providerCalled && provider !== this.#provider) {
                console.error(`[timeoutManager]: Switching provider after calls to previous provider might result in unexpected behavior.`, {
                    previous: this.#provider,
                    provider
                });
            }
        }
        this.#provider = provider;
        if (("TURBOPACK compile-time value", "development") !== "production") {
            this.#providerCalled = false;
        }
    }
    setTimeout(callback, delay) {
        if (("TURBOPACK compile-time value", "development") !== "production") {
            this.#providerCalled = true;
        }
        return this.#provider.setTimeout(callback, delay);
    }
    clearTimeout(timeoutId) {
        this.#provider.clearTimeout(timeoutId);
    }
    setInterval(callback, delay) {
        if (("TURBOPACK compile-time value", "development") !== "production") {
            this.#providerCalled = true;
        }
        return this.#provider.setInterval(callback, delay);
    }
    clearInterval(intervalId) {
        this.#provider.clearInterval(intervalId);
    }
};
var timeoutManager = new TimeoutManager();
function systemSetTimeoutZero(callback) {
    setTimeout(callback, 0);
}
;
 //# sourceMappingURL=timeoutManager.js.map
}),
"[project]/node_modules/@tanstack/query-core/build/modern/utils.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/utils.ts
__turbopack_context__.s([
    "addToEnd",
    ()=>addToEnd,
    "addToStart",
    ()=>addToStart,
    "ensureQueryFn",
    ()=>ensureQueryFn,
    "functionalUpdate",
    ()=>functionalUpdate,
    "hashKey",
    ()=>hashKey,
    "hashQueryKeyByOptions",
    ()=>hashQueryKeyByOptions,
    "isPlainArray",
    ()=>isPlainArray,
    "isPlainObject",
    ()=>isPlainObject,
    "isServer",
    ()=>isServer,
    "isValidTimeout",
    ()=>isValidTimeout,
    "keepPreviousData",
    ()=>keepPreviousData,
    "matchMutation",
    ()=>matchMutation,
    "matchQuery",
    ()=>matchQuery,
    "noop",
    ()=>noop,
    "partialMatchKey",
    ()=>partialMatchKey,
    "replaceData",
    ()=>replaceData,
    "replaceEqualDeep",
    ()=>replaceEqualDeep,
    "resolveEnabled",
    ()=>resolveEnabled,
    "resolveStaleTime",
    ()=>resolveStaleTime,
    "shallowEqualObjects",
    ()=>shallowEqualObjects,
    "shouldThrowError",
    ()=>shouldThrowError,
    "skipToken",
    ()=>skipToken,
    "sleep",
    ()=>sleep,
    "timeUntilStale",
    ()=>timeUntilStale
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$timeoutManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/timeoutManager.js [app-ssr] (ecmascript)");
;
var isServer = "undefined" === "undefined" || "Deno" in globalThis;
function noop() {}
function functionalUpdate(updater, input) {
    return typeof updater === "function" ? updater(input) : updater;
}
function isValidTimeout(value) {
    return typeof value === "number" && value >= 0 && value !== Infinity;
}
function timeUntilStale(updatedAt, staleTime) {
    return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);
}
function resolveStaleTime(staleTime, query) {
    return typeof staleTime === "function" ? staleTime(query) : staleTime;
}
function resolveEnabled(enabled, query) {
    return typeof enabled === "function" ? enabled(query) : enabled;
}
function matchQuery(filters, query) {
    const { type = "all", exact, fetchStatus, predicate, queryKey, stale } = filters;
    if (queryKey) {
        if (exact) {
            if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {
                return false;
            }
        } else if (!partialMatchKey(query.queryKey, queryKey)) {
            return false;
        }
    }
    if (type !== "all") {
        const isActive = query.isActive();
        if (type === "active" && !isActive) {
            return false;
        }
        if (type === "inactive" && isActive) {
            return false;
        }
    }
    if (typeof stale === "boolean" && query.isStale() !== stale) {
        return false;
    }
    if (fetchStatus && fetchStatus !== query.state.fetchStatus) {
        return false;
    }
    if (predicate && !predicate(query)) {
        return false;
    }
    return true;
}
function matchMutation(filters, mutation) {
    const { exact, status, predicate, mutationKey } = filters;
    if (mutationKey) {
        if (!mutation.options.mutationKey) {
            return false;
        }
        if (exact) {
            if (hashKey(mutation.options.mutationKey) !== hashKey(mutationKey)) {
                return false;
            }
        } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {
            return false;
        }
    }
    if (status && mutation.state.status !== status) {
        return false;
    }
    if (predicate && !predicate(mutation)) {
        return false;
    }
    return true;
}
function hashQueryKeyByOptions(queryKey, options) {
    const hashFn = options?.queryKeyHashFn || hashKey;
    return hashFn(queryKey);
}
function hashKey(queryKey) {
    return JSON.stringify(queryKey, (_, val)=>isPlainObject(val) ? Object.keys(val).sort().reduce((result, key)=>{
            result[key] = val[key];
            return result;
        }, {}) : val);
}
function partialMatchKey(a, b) {
    if (a === b) {
        return true;
    }
    if (typeof a !== typeof b) {
        return false;
    }
    if (a && b && typeof a === "object" && typeof b === "object") {
        return Object.keys(b).every((key)=>partialMatchKey(a[key], b[key]));
    }
    return false;
}
var hasOwn = Object.prototype.hasOwnProperty;
function replaceEqualDeep(a, b) {
    if (a === b) {
        return a;
    }
    const array = isPlainArray(a) && isPlainArray(b);
    if (!array && !(isPlainObject(a) && isPlainObject(b))) return b;
    const aItems = array ? a : Object.keys(a);
    const aSize = aItems.length;
    const bItems = array ? b : Object.keys(b);
    const bSize = bItems.length;
    const copy = array ? new Array(bSize) : {};
    let equalItems = 0;
    for(let i = 0; i < bSize; i++){
        const key = array ? i : bItems[i];
        const aItem = a[key];
        const bItem = b[key];
        if (aItem === bItem) {
            copy[key] = aItem;
            if (array ? i < aSize : hasOwn.call(a, key)) equalItems++;
            continue;
        }
        if (aItem === null || bItem === null || typeof aItem !== "object" || typeof bItem !== "object") {
            copy[key] = bItem;
            continue;
        }
        const v = replaceEqualDeep(aItem, bItem);
        copy[key] = v;
        if (v === aItem) equalItems++;
    }
    return aSize === bSize && equalItems === aSize ? a : copy;
}
function shallowEqualObjects(a, b) {
    if (!b || Object.keys(a).length !== Object.keys(b).length) {
        return false;
    }
    for(const key in a){
        if (a[key] !== b[key]) {
            return false;
        }
    }
    return true;
}
function isPlainArray(value) {
    return Array.isArray(value) && value.length === Object.keys(value).length;
}
function isPlainObject(o) {
    if (!hasObjectPrototype(o)) {
        return false;
    }
    const ctor = o.constructor;
    if (ctor === void 0) {
        return true;
    }
    const prot = ctor.prototype;
    if (!hasObjectPrototype(prot)) {
        return false;
    }
    if (!prot.hasOwnProperty("isPrototypeOf")) {
        return false;
    }
    if (Object.getPrototypeOf(o) !== Object.prototype) {
        return false;
    }
    return true;
}
function hasObjectPrototype(o) {
    return Object.prototype.toString.call(o) === "[object Object]";
}
function sleep(timeout) {
    return new Promise((resolve)=>{
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$timeoutManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["timeoutManager"].setTimeout(resolve, timeout);
    });
}
function replaceData(prevData, data, options) {
    if (typeof options.structuralSharing === "function") {
        return options.structuralSharing(prevData, data);
    } else if (options.structuralSharing !== false) {
        if ("TURBOPACK compile-time truthy", 1) {
            try {
                return replaceEqualDeep(prevData, data);
            } catch (error) {
                console.error(`Structural sharing requires data to be JSON serializable. To fix this, turn off structuralSharing or return JSON-serializable data from your queryFn. [${options.queryHash}]: ${error}`);
                throw error;
            }
        }
        return replaceEqualDeep(prevData, data);
    }
    return data;
}
function keepPreviousData(previousData) {
    return previousData;
}
function addToEnd(items, item, max = 0) {
    const newItems = [
        ...items,
        item
    ];
    return max && newItems.length > max ? newItems.slice(1) : newItems;
}
function addToStart(items, item, max = 0) {
    const newItems = [
        item,
        ...items
    ];
    return max && newItems.length > max ? newItems.slice(0, -1) : newItems;
}
var skipToken = Symbol();
function ensureQueryFn(options, fetchOptions) {
    if ("TURBOPACK compile-time truthy", 1) {
        if (options.queryFn === skipToken) {
            console.error(`Attempted to invoke queryFn when set to skipToken. This is likely a configuration error. Query hash: '${options.queryHash}'`);
        }
    }
    if (!options.queryFn && fetchOptions?.initialPromise) {
        return ()=>fetchOptions.initialPromise;
    }
    if (!options.queryFn || options.queryFn === skipToken) {
        return ()=>Promise.reject(new Error(`Missing queryFn: '${options.queryHash}'`));
    }
    return options.queryFn;
}
function shouldThrowError(throwOnError, params) {
    if (typeof throwOnError === "function") {
        return throwOnError(...params);
    }
    return !!throwOnError;
}
;
 //# sourceMappingURL=utils.js.map
}),
"[project]/node_modules/@tanstack/query-core/build/modern/notifyManager.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/notifyManager.ts
__turbopack_context__.s([
    "createNotifyManager",
    ()=>createNotifyManager,
    "defaultScheduler",
    ()=>defaultScheduler,
    "notifyManager",
    ()=>notifyManager
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$timeoutManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/timeoutManager.js [app-ssr] (ecmascript)");
;
var defaultScheduler = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$timeoutManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["systemSetTimeoutZero"];
function createNotifyManager() {
    let queue = [];
    let transactions = 0;
    let notifyFn = (callback)=>{
        callback();
    };
    let batchNotifyFn = (callback)=>{
        callback();
    };
    let scheduleFn = defaultScheduler;
    const schedule = (callback)=>{
        if (transactions) {
            queue.push(callback);
        } else {
            scheduleFn(()=>{
                notifyFn(callback);
            });
        }
    };
    const flush = ()=>{
        const originalQueue = queue;
        queue = [];
        if (originalQueue.length) {
            scheduleFn(()=>{
                batchNotifyFn(()=>{
                    originalQueue.forEach((callback)=>{
                        notifyFn(callback);
                    });
                });
            });
        }
    };
    return {
        batch: (callback)=>{
            let result;
            transactions++;
            try {
                result = callback();
            } finally{
                transactions--;
                if (!transactions) {
                    flush();
                }
            }
            return result;
        },
        /**
     * All calls to the wrapped function will be batched.
     */ batchCalls: (callback)=>{
            return (...args)=>{
                schedule(()=>{
                    callback(...args);
                });
            };
        },
        schedule,
        /**
     * Use this method to set a custom notify function.
     * This can be used to for example wrap notifications with `React.act` while running tests.
     */ setNotifyFunction: (fn)=>{
            notifyFn = fn;
        },
        /**
     * Use this method to set a custom function to batch notifications together into a single tick.
     * By default React Query will use the batch function provided by ReactDOM or React Native.
     */ setBatchNotifyFunction: (fn)=>{
            batchNotifyFn = fn;
        },
        setScheduler: (fn)=>{
            scheduleFn = fn;
        }
    };
}
var notifyManager = createNotifyManager();
;
 //# sourceMappingURL=notifyManager.js.map
}),
"[project]/node_modules/@tanstack/query-core/build/modern/subscribable.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/subscribable.ts
__turbopack_context__.s([
    "Subscribable",
    ()=>Subscribable
]);
var Subscribable = class {
    constructor(){
        this.listeners = /* @__PURE__ */ new Set();
        this.subscribe = this.subscribe.bind(this);
    }
    subscribe(listener) {
        this.listeners.add(listener);
        this.onSubscribe();
        return ()=>{
            this.listeners.delete(listener);
            this.onUnsubscribe();
        };
    }
    hasListeners() {
        return this.listeners.size > 0;
    }
    onSubscribe() {}
    onUnsubscribe() {}
};
;
 //# sourceMappingURL=subscribable.js.map
}),
"[project]/node_modules/@tanstack/query-core/build/modern/focusManager.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/focusManager.ts
__turbopack_context__.s([
    "FocusManager",
    ()=>FocusManager,
    "focusManager",
    ()=>focusManager
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$subscribable$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/subscribable.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/utils.js [app-ssr] (ecmascript)");
;
;
var FocusManager = class extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$subscribable$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Subscribable"] {
    #focused;
    #cleanup;
    #setup;
    constructor(){
        super();
        this.#setup = (onFocus)=>{
            if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isServer"] && window.addEventListener) {
                const listener = ()=>onFocus();
                window.addEventListener("visibilitychange", listener, false);
                return ()=>{
                    window.removeEventListener("visibilitychange", listener);
                };
            }
            return;
        };
    }
    onSubscribe() {
        if (!this.#cleanup) {
            this.setEventListener(this.#setup);
        }
    }
    onUnsubscribe() {
        if (!this.hasListeners()) {
            this.#cleanup?.();
            this.#cleanup = void 0;
        }
    }
    setEventListener(setup) {
        this.#setup = setup;
        this.#cleanup?.();
        this.#cleanup = setup((focused)=>{
            if (typeof focused === "boolean") {
                this.setFocused(focused);
            } else {
                this.onFocus();
            }
        });
    }
    setFocused(focused) {
        const changed = this.#focused !== focused;
        if (changed) {
            this.#focused = focused;
            this.onFocus();
        }
    }
    onFocus() {
        const isFocused = this.isFocused();
        this.listeners.forEach((listener)=>{
            listener(isFocused);
        });
    }
    isFocused() {
        if (typeof this.#focused === "boolean") {
            return this.#focused;
        }
        return globalThis.document?.visibilityState !== "hidden";
    }
};
var focusManager = new FocusManager();
;
 //# sourceMappingURL=focusManager.js.map
}),
"[project]/node_modules/@tanstack/query-core/build/modern/onlineManager.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/onlineManager.ts
__turbopack_context__.s([
    "OnlineManager",
    ()=>OnlineManager,
    "onlineManager",
    ()=>onlineManager
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$subscribable$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/subscribable.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/utils.js [app-ssr] (ecmascript)");
;
;
var OnlineManager = class extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$subscribable$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Subscribable"] {
    #online = true;
    #cleanup;
    #setup;
    constructor(){
        super();
        this.#setup = (onOnline)=>{
            if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isServer"] && window.addEventListener) {
                const onlineListener = ()=>onOnline(true);
                const offlineListener = ()=>onOnline(false);
                window.addEventListener("online", onlineListener, false);
                window.addEventListener("offline", offlineListener, false);
                return ()=>{
                    window.removeEventListener("online", onlineListener);
                    window.removeEventListener("offline", offlineListener);
                };
            }
            return;
        };
    }
    onSubscribe() {
        if (!this.#cleanup) {
            this.setEventListener(this.#setup);
        }
    }
    onUnsubscribe() {
        if (!this.hasListeners()) {
            this.#cleanup?.();
            this.#cleanup = void 0;
        }
    }
    setEventListener(setup) {
        this.#setup = setup;
        this.#cleanup?.();
        this.#cleanup = setup(this.setOnline.bind(this));
    }
    setOnline(online) {
        const changed = this.#online !== online;
        if (changed) {
            this.#online = online;
            this.listeners.forEach((listener)=>{
                listener(online);
            });
        }
    }
    isOnline() {
        return this.#online;
    }
};
var onlineManager = new OnlineManager();
;
 //# sourceMappingURL=onlineManager.js.map
}),
"[project]/node_modules/@tanstack/query-core/build/modern/thenable.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/thenable.ts
__turbopack_context__.s([
    "pendingThenable",
    ()=>pendingThenable,
    "tryResolveSync",
    ()=>tryResolveSync
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/utils.js [app-ssr] (ecmascript)");
;
function pendingThenable() {
    let resolve;
    let reject;
    const thenable = new Promise((_resolve, _reject)=>{
        resolve = _resolve;
        reject = _reject;
    });
    thenable.status = "pending";
    thenable.catch(()=>{});
    function finalize(data) {
        Object.assign(thenable, data);
        delete thenable.resolve;
        delete thenable.reject;
    }
    thenable.resolve = (value)=>{
        finalize({
            status: "fulfilled",
            value
        });
        resolve(value);
    };
    thenable.reject = (reason)=>{
        finalize({
            status: "rejected",
            reason
        });
        reject(reason);
    };
    return thenable;
}
function tryResolveSync(promise) {
    let data;
    promise.then((result)=>{
        data = result;
        return result;
    }, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noop"])?.catch(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noop"]);
    if (data !== void 0) {
        return {
            data
        };
    }
    return void 0;
}
;
 //# sourceMappingURL=thenable.js.map
}),
"[project]/node_modules/@tanstack/query-core/build/modern/retryer.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/retryer.ts
__turbopack_context__.s([
    "CancelledError",
    ()=>CancelledError,
    "canFetch",
    ()=>canFetch,
    "createRetryer",
    ()=>createRetryer,
    "isCancelledError",
    ()=>isCancelledError
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$focusManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/focusManager.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$onlineManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/onlineManager.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$thenable$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/thenable.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/utils.js [app-ssr] (ecmascript)");
;
;
;
;
function defaultRetryDelay(failureCount) {
    return Math.min(1e3 * 2 ** failureCount, 3e4);
}
function canFetch(networkMode) {
    return (networkMode ?? "online") === "online" ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$onlineManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["onlineManager"].isOnline() : true;
}
var CancelledError = class extends Error {
    constructor(options){
        super("CancelledError");
        this.revert = options?.revert;
        this.silent = options?.silent;
    }
};
function isCancelledError(value) {
    return value instanceof CancelledError;
}
function createRetryer(config) {
    let isRetryCancelled = false;
    let failureCount = 0;
    let continueFn;
    const thenable = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$thenable$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["pendingThenable"])();
    const isResolved = ()=>thenable.status !== "pending";
    const cancel = (cancelOptions)=>{
        if (!isResolved()) {
            const error = new CancelledError(cancelOptions);
            reject(error);
            config.onCancel?.(error);
        }
    };
    const cancelRetry = ()=>{
        isRetryCancelled = true;
    };
    const continueRetry = ()=>{
        isRetryCancelled = false;
    };
    const canContinue = ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$focusManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["focusManager"].isFocused() && (config.networkMode === "always" || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$onlineManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["onlineManager"].isOnline()) && config.canRun();
    const canStart = ()=>canFetch(config.networkMode) && config.canRun();
    const resolve = (value)=>{
        if (!isResolved()) {
            continueFn?.();
            thenable.resolve(value);
        }
    };
    const reject = (value)=>{
        if (!isResolved()) {
            continueFn?.();
            thenable.reject(value);
        }
    };
    const pause = ()=>{
        return new Promise((continueResolve)=>{
            continueFn = (value)=>{
                if (isResolved() || canContinue()) {
                    continueResolve(value);
                }
            };
            config.onPause?.();
        }).then(()=>{
            continueFn = void 0;
            if (!isResolved()) {
                config.onContinue?.();
            }
        });
    };
    const run = ()=>{
        if (isResolved()) {
            return;
        }
        let promiseOrValue;
        const initialPromise = failureCount === 0 ? config.initialPromise : void 0;
        try {
            promiseOrValue = initialPromise ?? config.fn();
        } catch (error) {
            promiseOrValue = Promise.reject(error);
        }
        Promise.resolve(promiseOrValue).then(resolve).catch((error)=>{
            if (isResolved()) {
                return;
            }
            const retry = config.retry ?? (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isServer"] ? 0 : 3);
            const retryDelay = config.retryDelay ?? defaultRetryDelay;
            const delay = typeof retryDelay === "function" ? retryDelay(failureCount, error) : retryDelay;
            const shouldRetry = retry === true || typeof retry === "number" && failureCount < retry || typeof retry === "function" && retry(failureCount, error);
            if (isRetryCancelled || !shouldRetry) {
                reject(error);
                return;
            }
            failureCount++;
            config.onFail?.(failureCount, error);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sleep"])(delay).then(()=>{
                return canContinue() ? void 0 : pause();
            }).then(()=>{
                if (isRetryCancelled) {
                    reject(error);
                } else {
                    run();
                }
            });
        });
    };
    return {
        promise: thenable,
        status: ()=>thenable.status,
        cancel,
        continue: ()=>{
            continueFn?.();
            return thenable;
        },
        cancelRetry,
        continueRetry,
        canStart,
        start: ()=>{
            if (canStart()) {
                run();
            } else {
                pause().then(run);
            }
            return thenable;
        }
    };
}
;
 //# sourceMappingURL=retryer.js.map
}),
"[project]/node_modules/@tanstack/query-core/build/modern/removable.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/removable.ts
__turbopack_context__.s([
    "Removable",
    ()=>Removable
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$timeoutManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/timeoutManager.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/utils.js [app-ssr] (ecmascript)");
;
;
var Removable = class {
    #gcTimeout;
    destroy() {
        this.clearGcTimeout();
    }
    scheduleGc() {
        this.clearGcTimeout();
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isValidTimeout"])(this.gcTime)) {
            this.#gcTimeout = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$timeoutManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["timeoutManager"].setTimeout(()=>{
                this.optionalRemove();
            }, this.gcTime);
        }
    }
    updateGcTime(newGcTime) {
        this.gcTime = Math.max(this.gcTime || 0, newGcTime ?? (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isServer"] ? Infinity : 5 * 60 * 1e3));
    }
    clearGcTimeout() {
        if (this.#gcTimeout) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$timeoutManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["timeoutManager"].clearTimeout(this.#gcTimeout);
            this.#gcTimeout = void 0;
        }
    }
};
;
 //# sourceMappingURL=removable.js.map
}),
"[project]/node_modules/@tanstack/query-core/build/modern/query.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/query.ts
__turbopack_context__.s([
    "Query",
    ()=>Query,
    "fetchState",
    ()=>fetchState
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$notifyManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/notifyManager.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$retryer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/retryer.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$removable$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/removable.js [app-ssr] (ecmascript)");
;
;
;
;
var Query = class extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$removable$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Removable"] {
    #initialState;
    #revertState;
    #cache;
    #client;
    #retryer;
    #defaultOptions;
    #abortSignalConsumed;
    constructor(config){
        super();
        this.#abortSignalConsumed = false;
        this.#defaultOptions = config.defaultOptions;
        this.setOptions(config.options);
        this.observers = [];
        this.#client = config.client;
        this.#cache = this.#client.getQueryCache();
        this.queryKey = config.queryKey;
        this.queryHash = config.queryHash;
        this.#initialState = getDefaultState(this.options);
        this.state = config.state ?? this.#initialState;
        this.scheduleGc();
    }
    get meta() {
        return this.options.meta;
    }
    get promise() {
        return this.#retryer?.promise;
    }
    setOptions(options) {
        this.options = {
            ...this.#defaultOptions,
            ...options
        };
        this.updateGcTime(this.options.gcTime);
        if (this.state && this.state.data === void 0) {
            const defaultState = getDefaultState(this.options);
            if (defaultState.data !== void 0) {
                this.setData(defaultState.data, {
                    updatedAt: defaultState.dataUpdatedAt,
                    manual: true
                });
                this.#initialState = defaultState;
            }
        }
    }
    optionalRemove() {
        if (!this.observers.length && this.state.fetchStatus === "idle") {
            this.#cache.remove(this);
        }
    }
    setData(newData, options) {
        const data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["replaceData"])(this.state.data, newData, this.options);
        this.#dispatch({
            data,
            type: "success",
            dataUpdatedAt: options?.updatedAt,
            manual: options?.manual
        });
        return data;
    }
    setState(state, setStateOptions) {
        this.#dispatch({
            type: "setState",
            state,
            setStateOptions
        });
    }
    cancel(options) {
        const promise = this.#retryer?.promise;
        this.#retryer?.cancel(options);
        return promise ? promise.then(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noop"]).catch(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noop"]) : Promise.resolve();
    }
    destroy() {
        super.destroy();
        this.cancel({
            silent: true
        });
    }
    reset() {
        this.destroy();
        this.setState(this.#initialState);
    }
    isActive() {
        return this.observers.some((observer)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["resolveEnabled"])(observer.options.enabled, this) !== false);
    }
    isDisabled() {
        if (this.getObserversCount() > 0) {
            return !this.isActive();
        }
        return this.options.queryFn === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["skipToken"] || this.state.dataUpdateCount + this.state.errorUpdateCount === 0;
    }
    isStatic() {
        if (this.getObserversCount() > 0) {
            return this.observers.some((observer)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["resolveStaleTime"])(observer.options.staleTime, this) === "static");
        }
        return false;
    }
    isStale() {
        if (this.getObserversCount() > 0) {
            return this.observers.some((observer)=>observer.getCurrentResult().isStale);
        }
        return this.state.data === void 0 || this.state.isInvalidated;
    }
    isStaleByTime(staleTime = 0) {
        if (this.state.data === void 0) {
            return true;
        }
        if (staleTime === "static") {
            return false;
        }
        if (this.state.isInvalidated) {
            return true;
        }
        return !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["timeUntilStale"])(this.state.dataUpdatedAt, staleTime);
    }
    onFocus() {
        const observer = this.observers.find((x)=>x.shouldFetchOnWindowFocus());
        observer?.refetch({
            cancelRefetch: false
        });
        this.#retryer?.continue();
    }
    onOnline() {
        const observer = this.observers.find((x)=>x.shouldFetchOnReconnect());
        observer?.refetch({
            cancelRefetch: false
        });
        this.#retryer?.continue();
    }
    addObserver(observer) {
        if (!this.observers.includes(observer)) {
            this.observers.push(observer);
            this.clearGcTimeout();
            this.#cache.notify({
                type: "observerAdded",
                query: this,
                observer
            });
        }
    }
    removeObserver(observer) {
        if (this.observers.includes(observer)) {
            this.observers = this.observers.filter((x)=>x !== observer);
            if (!this.observers.length) {
                if (this.#retryer) {
                    if (this.#abortSignalConsumed) {
                        this.#retryer.cancel({
                            revert: true
                        });
                    } else {
                        this.#retryer.cancelRetry();
                    }
                }
                this.scheduleGc();
            }
            this.#cache.notify({
                type: "observerRemoved",
                query: this,
                observer
            });
        }
    }
    getObserversCount() {
        return this.observers.length;
    }
    invalidate() {
        if (!this.state.isInvalidated) {
            this.#dispatch({
                type: "invalidate"
            });
        }
    }
    async fetch(options, fetchOptions) {
        if (this.state.fetchStatus !== "idle" && // If the promise in the retyer is already rejected, we have to definitely
        // re-start the fetch; there is a chance that the query is still in a
        // pending state when that happens
        this.#retryer?.status() !== "rejected") {
            if (this.state.data !== void 0 && fetchOptions?.cancelRefetch) {
                this.cancel({
                    silent: true
                });
            } else if (this.#retryer) {
                this.#retryer.continueRetry();
                return this.#retryer.promise;
            }
        }
        if (options) {
            this.setOptions(options);
        }
        if (!this.options.queryFn) {
            const observer = this.observers.find((x)=>x.options.queryFn);
            if (observer) {
                this.setOptions(observer.options);
            }
        }
        if ("TURBOPACK compile-time truthy", 1) {
            if (!Array.isArray(this.options.queryKey)) {
                console.error(`As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`);
            }
        }
        const abortController = new AbortController();
        const addSignalProperty = (object)=>{
            Object.defineProperty(object, "signal", {
                enumerable: true,
                get: ()=>{
                    this.#abortSignalConsumed = true;
                    return abortController.signal;
                }
            });
        };
        const fetchFn = ()=>{
            const queryFn = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ensureQueryFn"])(this.options, fetchOptions);
            const createQueryFnContext = ()=>{
                const queryFnContext2 = {
                    client: this.#client,
                    queryKey: this.queryKey,
                    meta: this.meta
                };
                addSignalProperty(queryFnContext2);
                return queryFnContext2;
            };
            const queryFnContext = createQueryFnContext();
            this.#abortSignalConsumed = false;
            if (this.options.persister) {
                return this.options.persister(queryFn, queryFnContext, this);
            }
            return queryFn(queryFnContext);
        };
        const createFetchContext = ()=>{
            const context2 = {
                fetchOptions,
                options: this.options,
                queryKey: this.queryKey,
                client: this.#client,
                state: this.state,
                fetchFn
            };
            addSignalProperty(context2);
            return context2;
        };
        const context = createFetchContext();
        this.options.behavior?.onFetch(context, this);
        this.#revertState = this.state;
        if (this.state.fetchStatus === "idle" || this.state.fetchMeta !== context.fetchOptions?.meta) {
            this.#dispatch({
                type: "fetch",
                meta: context.fetchOptions?.meta
            });
        }
        this.#retryer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$retryer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createRetryer"])({
            initialPromise: fetchOptions?.initialPromise,
            fn: context.fetchFn,
            onCancel: (error)=>{
                if (error instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$retryer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CancelledError"] && error.revert) {
                    this.setState({
                        ...this.#revertState,
                        fetchStatus: "idle"
                    });
                }
                abortController.abort();
            },
            onFail: (failureCount, error)=>{
                this.#dispatch({
                    type: "failed",
                    failureCount,
                    error
                });
            },
            onPause: ()=>{
                this.#dispatch({
                    type: "pause"
                });
            },
            onContinue: ()=>{
                this.#dispatch({
                    type: "continue"
                });
            },
            retry: context.options.retry,
            retryDelay: context.options.retryDelay,
            networkMode: context.options.networkMode,
            canRun: ()=>true
        });
        try {
            const data = await this.#retryer.start();
            if (data === void 0) {
                if ("TURBOPACK compile-time truthy", 1) {
                    console.error(`Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`);
                }
                throw new Error(`${this.queryHash} data is undefined`);
            }
            this.setData(data);
            this.#cache.config.onSuccess?.(data, this);
            this.#cache.config.onSettled?.(data, this.state.error, this);
            return data;
        } catch (error) {
            if (error instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$retryer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["CancelledError"]) {
                if (error.silent) {
                    return this.#retryer.promise;
                } else if (error.revert) {
                    if (this.state.data === void 0) {
                        throw error;
                    }
                    return this.state.data;
                }
            }
            this.#dispatch({
                type: "error",
                error
            });
            this.#cache.config.onError?.(error, this);
            this.#cache.config.onSettled?.(this.state.data, error, this);
            throw error;
        } finally{
            this.scheduleGc();
        }
    }
    #dispatch(action) {
        const reducer = (state)=>{
            switch(action.type){
                case "failed":
                    return {
                        ...state,
                        fetchFailureCount: action.failureCount,
                        fetchFailureReason: action.error
                    };
                case "pause":
                    return {
                        ...state,
                        fetchStatus: "paused"
                    };
                case "continue":
                    return {
                        ...state,
                        fetchStatus: "fetching"
                    };
                case "fetch":
                    return {
                        ...state,
                        ...fetchState(state.data, this.options),
                        fetchMeta: action.meta ?? null
                    };
                case "success":
                    const newState = {
                        ...state,
                        data: action.data,
                        dataUpdateCount: state.dataUpdateCount + 1,
                        dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),
                        error: null,
                        isInvalidated: false,
                        status: "success",
                        ...!action.manual && {
                            fetchStatus: "idle",
                            fetchFailureCount: 0,
                            fetchFailureReason: null
                        }
                    };
                    this.#revertState = action.manual ? newState : void 0;
                    return newState;
                case "error":
                    const error = action.error;
                    return {
                        ...state,
                        error,
                        errorUpdateCount: state.errorUpdateCount + 1,
                        errorUpdatedAt: Date.now(),
                        fetchFailureCount: state.fetchFailureCount + 1,
                        fetchFailureReason: error,
                        fetchStatus: "idle",
                        status: "error"
                    };
                case "invalidate":
                    return {
                        ...state,
                        isInvalidated: true
                    };
                case "setState":
                    return {
                        ...state,
                        ...action.state
                    };
            }
        };
        this.state = reducer(this.state);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$notifyManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["notifyManager"].batch(()=>{
            this.observers.forEach((observer)=>{
                observer.onQueryUpdate();
            });
            this.#cache.notify({
                query: this,
                type: "updated",
                action
            });
        });
    }
};
function fetchState(data, options) {
    return {
        fetchFailureCount: 0,
        fetchFailureReason: null,
        fetchStatus: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$retryer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["canFetch"])(options.networkMode) ? "fetching" : "paused",
        ...data === void 0 && {
            error: null,
            status: "pending"
        }
    };
}
function getDefaultState(options) {
    const data = typeof options.initialData === "function" ? options.initialData() : options.initialData;
    const hasData = data !== void 0;
    const initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === "function" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;
    return {
        data,
        dataUpdateCount: 0,
        dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,
        error: null,
        errorUpdateCount: 0,
        errorUpdatedAt: 0,
        fetchFailureCount: 0,
        fetchFailureReason: null,
        fetchMeta: null,
        isInvalidated: false,
        status: hasData ? "success" : "pending",
        fetchStatus: "idle"
    };
}
;
 //# sourceMappingURL=query.js.map
}),
"[project]/node_modules/@tanstack/query-core/build/modern/queryCache.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/queryCache.ts
__turbopack_context__.s([
    "QueryCache",
    ()=>QueryCache
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$query$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/query.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$notifyManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/notifyManager.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$subscribable$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/subscribable.js [app-ssr] (ecmascript)");
;
;
;
;
var QueryCache = class extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$subscribable$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Subscribable"] {
    constructor(config = {}){
        super();
        this.config = config;
        this.#queries = /* @__PURE__ */ new Map();
    }
    #queries;
    build(client, options, state) {
        const queryKey = options.queryKey;
        const queryHash = options.queryHash ?? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["hashQueryKeyByOptions"])(queryKey, options);
        let query = this.get(queryHash);
        if (!query) {
            query = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$query$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Query"]({
                client,
                queryKey,
                queryHash,
                options: client.defaultQueryOptions(options),
                state,
                defaultOptions: client.getQueryDefaults(queryKey)
            });
            this.add(query);
        }
        return query;
    }
    add(query) {
        if (!this.#queries.has(query.queryHash)) {
            this.#queries.set(query.queryHash, query);
            this.notify({
                type: "added",
                query
            });
        }
    }
    remove(query) {
        const queryInMap = this.#queries.get(query.queryHash);
        if (queryInMap) {
            query.destroy();
            if (queryInMap === query) {
                this.#queries.delete(query.queryHash);
            }
            this.notify({
                type: "removed",
                query
            });
        }
    }
    clear() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$notifyManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["notifyManager"].batch(()=>{
            this.getAll().forEach((query)=>{
                this.remove(query);
            });
        });
    }
    get(queryHash) {
        return this.#queries.get(queryHash);
    }
    getAll() {
        return [
            ...this.#queries.values()
        ];
    }
    find(filters) {
        const defaultedFilters = {
            exact: true,
            ...filters
        };
        return this.getAll().find((query)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["matchQuery"])(defaultedFilters, query));
    }
    findAll(filters = {}) {
        const queries = this.getAll();
        return Object.keys(filters).length > 0 ? queries.filter((query)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["matchQuery"])(filters, query)) : queries;
    }
    notify(event) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$notifyManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["notifyManager"].batch(()=>{
            this.listeners.forEach((listener)=>{
                listener(event);
            });
        });
    }
    onFocus() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$notifyManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["notifyManager"].batch(()=>{
            this.getAll().forEach((query)=>{
                query.onFocus();
            });
        });
    }
    onOnline() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$notifyManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["notifyManager"].batch(()=>{
            this.getAll().forEach((query)=>{
                query.onOnline();
            });
        });
    }
};
;
 //# sourceMappingURL=queryCache.js.map
}),
"[project]/node_modules/@tanstack/query-core/build/modern/mutation.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/mutation.ts
__turbopack_context__.s([
    "Mutation",
    ()=>Mutation,
    "getDefaultState",
    ()=>getDefaultState
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$notifyManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/notifyManager.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$removable$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/removable.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$retryer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/retryer.js [app-ssr] (ecmascript)");
;
;
;
var Mutation = class extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$removable$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Removable"] {
    #observers;
    #mutationCache;
    #retryer;
    constructor(config){
        super();
        this.mutationId = config.mutationId;
        this.#mutationCache = config.mutationCache;
        this.#observers = [];
        this.state = config.state || getDefaultState();
        this.setOptions(config.options);
        this.scheduleGc();
    }
    setOptions(options) {
        this.options = options;
        this.updateGcTime(this.options.gcTime);
    }
    get meta() {
        return this.options.meta;
    }
    addObserver(observer) {
        if (!this.#observers.includes(observer)) {
            this.#observers.push(observer);
            this.clearGcTimeout();
            this.#mutationCache.notify({
                type: "observerAdded",
                mutation: this,
                observer
            });
        }
    }
    removeObserver(observer) {
        this.#observers = this.#observers.filter((x)=>x !== observer);
        this.scheduleGc();
        this.#mutationCache.notify({
            type: "observerRemoved",
            mutation: this,
            observer
        });
    }
    optionalRemove() {
        if (!this.#observers.length) {
            if (this.state.status === "pending") {
                this.scheduleGc();
            } else {
                this.#mutationCache.remove(this);
            }
        }
    }
    continue() {
        return this.#retryer?.continue() ?? // continuing a mutation assumes that variables are set, mutation must have been dehydrated before
        this.execute(this.state.variables);
    }
    async execute(variables) {
        const onContinue = ()=>{
            this.#dispatch({
                type: "continue"
            });
        };
        this.#retryer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$retryer$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createRetryer"])({
            fn: ()=>{
                if (!this.options.mutationFn) {
                    return Promise.reject(new Error("No mutationFn found"));
                }
                return this.options.mutationFn(variables);
            },
            onFail: (failureCount, error)=>{
                this.#dispatch({
                    type: "failed",
                    failureCount,
                    error
                });
            },
            onPause: ()=>{
                this.#dispatch({
                    type: "pause"
                });
            },
            onContinue,
            retry: this.options.retry ?? 0,
            retryDelay: this.options.retryDelay,
            networkMode: this.options.networkMode,
            canRun: ()=>this.#mutationCache.canRun(this)
        });
        const restored = this.state.status === "pending";
        const isPaused = !this.#retryer.canStart();
        try {
            if (restored) {
                onContinue();
            } else {
                this.#dispatch({
                    type: "pending",
                    variables,
                    isPaused
                });
                await this.#mutationCache.config.onMutate?.(variables, this);
                const context = await this.options.onMutate?.(variables);
                if (context !== this.state.context) {
                    this.#dispatch({
                        type: "pending",
                        context,
                        variables,
                        isPaused
                    });
                }
            }
            const data = await this.#retryer.start();
            await this.#mutationCache.config.onSuccess?.(data, variables, this.state.context, this);
            await this.options.onSuccess?.(data, variables, this.state.context);
            await this.#mutationCache.config.onSettled?.(data, null, this.state.variables, this.state.context, this);
            await this.options.onSettled?.(data, null, variables, this.state.context);
            this.#dispatch({
                type: "success",
                data
            });
            return data;
        } catch (error) {
            try {
                await this.#mutationCache.config.onError?.(error, variables, this.state.context, this);
                await this.options.onError?.(error, variables, this.state.context);
                await this.#mutationCache.config.onSettled?.(void 0, error, this.state.variables, this.state.context, this);
                await this.options.onSettled?.(void 0, error, variables, this.state.context);
                throw error;
            } finally{
                this.#dispatch({
                    type: "error",
                    error
                });
            }
        } finally{
            this.#mutationCache.runNext(this);
        }
    }
    #dispatch(action) {
        const reducer = (state)=>{
            switch(action.type){
                case "failed":
                    return {
                        ...state,
                        failureCount: action.failureCount,
                        failureReason: action.error
                    };
                case "pause":
                    return {
                        ...state,
                        isPaused: true
                    };
                case "continue":
                    return {
                        ...state,
                        isPaused: false
                    };
                case "pending":
                    return {
                        ...state,
                        context: action.context,
                        data: void 0,
                        failureCount: 0,
                        failureReason: null,
                        error: null,
                        isPaused: action.isPaused,
                        status: "pending",
                        variables: action.variables,
                        submittedAt: Date.now()
                    };
                case "success":
                    return {
                        ...state,
                        data: action.data,
                        failureCount: 0,
                        failureReason: null,
                        error: null,
                        status: "success",
                        isPaused: false
                    };
                case "error":
                    return {
                        ...state,
                        data: void 0,
                        error: action.error,
                        failureCount: state.failureCount + 1,
                        failureReason: action.error,
                        isPaused: false,
                        status: "error"
                    };
            }
        };
        this.state = reducer(this.state);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$notifyManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["notifyManager"].batch(()=>{
            this.#observers.forEach((observer)=>{
                observer.onMutationUpdate(action);
            });
            this.#mutationCache.notify({
                mutation: this,
                type: "updated",
                action
            });
        });
    }
};
function getDefaultState() {
    return {
        context: void 0,
        data: void 0,
        error: null,
        failureCount: 0,
        failureReason: null,
        isPaused: false,
        status: "idle",
        variables: void 0,
        submittedAt: 0
    };
}
;
 //# sourceMappingURL=mutation.js.map
}),
"[project]/node_modules/@tanstack/query-core/build/modern/mutationCache.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/mutationCache.ts
__turbopack_context__.s([
    "MutationCache",
    ()=>MutationCache
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$notifyManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/notifyManager.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$mutation$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/mutation.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$subscribable$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/subscribable.js [app-ssr] (ecmascript)");
;
;
;
;
var MutationCache = class extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$subscribable$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Subscribable"] {
    constructor(config = {}){
        super();
        this.config = config;
        this.#mutations = /* @__PURE__ */ new Set();
        this.#scopes = /* @__PURE__ */ new Map();
        this.#mutationId = 0;
    }
    #mutations;
    #scopes;
    #mutationId;
    build(client, options, state) {
        const mutation = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$mutation$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Mutation"]({
            mutationCache: this,
            mutationId: ++this.#mutationId,
            options: client.defaultMutationOptions(options),
            state
        });
        this.add(mutation);
        return mutation;
    }
    add(mutation) {
        this.#mutations.add(mutation);
        const scope = scopeFor(mutation);
        if (typeof scope === "string") {
            const scopedMutations = this.#scopes.get(scope);
            if (scopedMutations) {
                scopedMutations.push(mutation);
            } else {
                this.#scopes.set(scope, [
                    mutation
                ]);
            }
        }
        this.notify({
            type: "added",
            mutation
        });
    }
    remove(mutation) {
        if (this.#mutations.delete(mutation)) {
            const scope = scopeFor(mutation);
            if (typeof scope === "string") {
                const scopedMutations = this.#scopes.get(scope);
                if (scopedMutations) {
                    if (scopedMutations.length > 1) {
                        const index = scopedMutations.indexOf(mutation);
                        if (index !== -1) {
                            scopedMutations.splice(index, 1);
                        }
                    } else if (scopedMutations[0] === mutation) {
                        this.#scopes.delete(scope);
                    }
                }
            }
        }
        this.notify({
            type: "removed",
            mutation
        });
    }
    canRun(mutation) {
        const scope = scopeFor(mutation);
        if (typeof scope === "string") {
            const mutationsWithSameScope = this.#scopes.get(scope);
            const firstPendingMutation = mutationsWithSameScope?.find((m)=>m.state.status === "pending");
            return !firstPendingMutation || firstPendingMutation === mutation;
        } else {
            return true;
        }
    }
    runNext(mutation) {
        const scope = scopeFor(mutation);
        if (typeof scope === "string") {
            const foundMutation = this.#scopes.get(scope)?.find((m)=>m !== mutation && m.state.isPaused);
            return foundMutation?.continue() ?? Promise.resolve();
        } else {
            return Promise.resolve();
        }
    }
    clear() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$notifyManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["notifyManager"].batch(()=>{
            this.#mutations.forEach((mutation)=>{
                this.notify({
                    type: "removed",
                    mutation
                });
            });
            this.#mutations.clear();
            this.#scopes.clear();
        });
    }
    getAll() {
        return Array.from(this.#mutations);
    }
    find(filters) {
        const defaultedFilters = {
            exact: true,
            ...filters
        };
        return this.getAll().find((mutation)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["matchMutation"])(defaultedFilters, mutation));
    }
    findAll(filters = {}) {
        return this.getAll().filter((mutation)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["matchMutation"])(filters, mutation));
    }
    notify(event) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$notifyManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["notifyManager"].batch(()=>{
            this.listeners.forEach((listener)=>{
                listener(event);
            });
        });
    }
    resumePausedMutations() {
        const pausedMutations = this.getAll().filter((x)=>x.state.isPaused);
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$notifyManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["notifyManager"].batch(()=>Promise.all(pausedMutations.map((mutation)=>mutation.continue().catch(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noop"]))));
    }
};
function scopeFor(mutation) {
    return mutation.options.scope?.id;
}
;
 //# sourceMappingURL=mutationCache.js.map
}),
"[project]/node_modules/@tanstack/query-core/build/modern/infiniteQueryBehavior.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/infiniteQueryBehavior.ts
__turbopack_context__.s([
    "hasNextPage",
    ()=>hasNextPage,
    "hasPreviousPage",
    ()=>hasPreviousPage,
    "infiniteQueryBehavior",
    ()=>infiniteQueryBehavior
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/utils.js [app-ssr] (ecmascript)");
;
function infiniteQueryBehavior(pages) {
    return {
        onFetch: (context, query)=>{
            const options = context.options;
            const direction = context.fetchOptions?.meta?.fetchMore?.direction;
            const oldPages = context.state.data?.pages || [];
            const oldPageParams = context.state.data?.pageParams || [];
            let result = {
                pages: [],
                pageParams: []
            };
            let currentPage = 0;
            const fetchFn = async ()=>{
                let cancelled = false;
                const addSignalProperty = (object)=>{
                    Object.defineProperty(object, "signal", {
                        enumerable: true,
                        get: ()=>{
                            if (context.signal.aborted) {
                                cancelled = true;
                            } else {
                                context.signal.addEventListener("abort", ()=>{
                                    cancelled = true;
                                });
                            }
                            return context.signal;
                        }
                    });
                };
                const queryFn = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ensureQueryFn"])(context.options, context.fetchOptions);
                const fetchPage = async (data, param, previous)=>{
                    if (cancelled) {
                        return Promise.reject();
                    }
                    if (param == null && data.pages.length) {
                        return Promise.resolve(data);
                    }
                    const createQueryFnContext = ()=>{
                        const queryFnContext2 = {
                            client: context.client,
                            queryKey: context.queryKey,
                            pageParam: param,
                            direction: previous ? "backward" : "forward",
                            meta: context.options.meta
                        };
                        addSignalProperty(queryFnContext2);
                        return queryFnContext2;
                    };
                    const queryFnContext = createQueryFnContext();
                    const page = await queryFn(queryFnContext);
                    const { maxPages } = context.options;
                    const addTo = previous ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addToStart"] : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["addToEnd"];
                    return {
                        pages: addTo(data.pages, page, maxPages),
                        pageParams: addTo(data.pageParams, param, maxPages)
                    };
                };
                if (direction && oldPages.length) {
                    const previous = direction === "backward";
                    const pageParamFn = previous ? getPreviousPageParam : getNextPageParam;
                    const oldData = {
                        pages: oldPages,
                        pageParams: oldPageParams
                    };
                    const param = pageParamFn(options, oldData);
                    result = await fetchPage(oldData, param, previous);
                } else {
                    const remainingPages = pages ?? oldPages.length;
                    do {
                        const param = currentPage === 0 ? oldPageParams[0] ?? options.initialPageParam : getNextPageParam(options, result);
                        if (currentPage > 0 && param == null) {
                            break;
                        }
                        result = await fetchPage(result, param);
                        currentPage++;
                    }while (currentPage < remainingPages)
                }
                return result;
            };
            if (context.options.persister) {
                context.fetchFn = ()=>{
                    return context.options.persister?.(fetchFn, {
                        client: context.client,
                        queryKey: context.queryKey,
                        meta: context.options.meta,
                        signal: context.signal
                    }, query);
                };
            } else {
                context.fetchFn = fetchFn;
            }
        }
    };
}
function getNextPageParam(options, { pages, pageParams }) {
    const lastIndex = pages.length - 1;
    return pages.length > 0 ? options.getNextPageParam(pages[lastIndex], pages, pageParams[lastIndex], pageParams) : void 0;
}
function getPreviousPageParam(options, { pages, pageParams }) {
    return pages.length > 0 ? options.getPreviousPageParam?.(pages[0], pages, pageParams[0], pageParams) : void 0;
}
function hasNextPage(options, data) {
    if (!data) return false;
    return getNextPageParam(options, data) != null;
}
function hasPreviousPage(options, data) {
    if (!data || !options.getPreviousPageParam) return false;
    return getPreviousPageParam(options, data) != null;
}
;
 //# sourceMappingURL=infiniteQueryBehavior.js.map
}),
"[project]/node_modules/@tanstack/query-core/build/modern/queryClient.js [app-ssr] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// src/queryClient.ts
__turbopack_context__.s([
    "QueryClient",
    ()=>QueryClient
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$queryCache$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/queryCache.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$mutationCache$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/mutationCache.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$focusManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/focusManager.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$onlineManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/onlineManager.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$notifyManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/notifyManager.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$infiniteQueryBehavior$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tanstack/query-core/build/modern/infiniteQueryBehavior.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
var QueryClient = class {
    #queryCache;
    #mutationCache;
    #defaultOptions;
    #queryDefaults;
    #mutationDefaults;
    #mountCount;
    #unsubscribeFocus;
    #unsubscribeOnline;
    constructor(config = {}){
        this.#queryCache = config.queryCache || new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$queryCache$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["QueryCache"]();
        this.#mutationCache = config.mutationCache || new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$mutationCache$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MutationCache"]();
        this.#defaultOptions = config.defaultOptions || {};
        this.#queryDefaults = /* @__PURE__ */ new Map();
        this.#mutationDefaults = /* @__PURE__ */ new Map();
        this.#mountCount = 0;
    }
    mount() {
        this.#mountCount++;
        if (this.#mountCount !== 1) return;
        this.#unsubscribeFocus = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$focusManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["focusManager"].subscribe(async (focused)=>{
            if (focused) {
                await this.resumePausedMutations();
                this.#queryCache.onFocus();
            }
        });
        this.#unsubscribeOnline = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$onlineManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["onlineManager"].subscribe(async (online)=>{
            if (online) {
                await this.resumePausedMutations();
                this.#queryCache.onOnline();
            }
        });
    }
    unmount() {
        this.#mountCount--;
        if (this.#mountCount !== 0) return;
        this.#unsubscribeFocus?.();
        this.#unsubscribeFocus = void 0;
        this.#unsubscribeOnline?.();
        this.#unsubscribeOnline = void 0;
    }
    isFetching(filters) {
        return this.#queryCache.findAll({
            ...filters,
            fetchStatus: "fetching"
        }).length;
    }
    isMutating(filters) {
        return this.#mutationCache.findAll({
            ...filters,
            status: "pending"
        }).length;
    }
    /**
   * Imperative (non-reactive) way to retrieve data for a QueryKey.
   * Should only be used in callbacks or functions where reading the latest data is necessary, e.g. for optimistic updates.
   *
   * Hint: Do not use this function inside a component, because it won't receive updates.
   * Use `useQuery` to create a `QueryObserver` that subscribes to changes.
   */ getQueryData(queryKey) {
        const options = this.defaultQueryOptions({
            queryKey
        });
        return this.#queryCache.get(options.queryHash)?.state.data;
    }
    ensureQueryData(options) {
        const defaultedOptions = this.defaultQueryOptions(options);
        const query = this.#queryCache.build(this, defaultedOptions);
        const cachedData = query.state.data;
        if (cachedData === void 0) {
            return this.fetchQuery(options);
        }
        if (options.revalidateIfStale && query.isStaleByTime((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["resolveStaleTime"])(defaultedOptions.staleTime, query))) {
            void this.prefetchQuery(defaultedOptions);
        }
        return Promise.resolve(cachedData);
    }
    getQueriesData(filters) {
        return this.#queryCache.findAll(filters).map(({ queryKey, state })=>{
            const data = state.data;
            return [
                queryKey,
                data
            ];
        });
    }
    setQueryData(queryKey, updater, options) {
        const defaultedOptions = this.defaultQueryOptions({
            queryKey
        });
        const query = this.#queryCache.get(defaultedOptions.queryHash);
        const prevData = query?.state.data;
        const data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["functionalUpdate"])(updater, prevData);
        if (data === void 0) {
            return void 0;
        }
        return this.#queryCache.build(this, defaultedOptions).setData(data, {
            ...options,
            manual: true
        });
    }
    setQueriesData(filters, updater, options) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$notifyManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["notifyManager"].batch(()=>this.#queryCache.findAll(filters).map(({ queryKey })=>[
                    queryKey,
                    this.setQueryData(queryKey, updater, options)
                ]));
    }
    getQueryState(queryKey) {
        const options = this.defaultQueryOptions({
            queryKey
        });
        return this.#queryCache.get(options.queryHash)?.state;
    }
    removeQueries(filters) {
        const queryCache = this.#queryCache;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$notifyManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["notifyManager"].batch(()=>{
            queryCache.findAll(filters).forEach((query)=>{
                queryCache.remove(query);
            });
        });
    }
    resetQueries(filters, options) {
        const queryCache = this.#queryCache;
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$notifyManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["notifyManager"].batch(()=>{
            queryCache.findAll(filters).forEach((query)=>{
                query.reset();
            });
            return this.refetchQueries({
                type: "active",
                ...filters
            }, options);
        });
    }
    cancelQueries(filters, cancelOptions = {}) {
        const defaultedCancelOptions = {
            revert: true,
            ...cancelOptions
        };
        const promises = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$notifyManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["notifyManager"].batch(()=>this.#queryCache.findAll(filters).map((query)=>query.cancel(defaultedCancelOptions)));
        return Promise.all(promises).then(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noop"]).catch(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noop"]);
    }
    invalidateQueries(filters, options = {}) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$notifyManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["notifyManager"].batch(()=>{
            this.#queryCache.findAll(filters).forEach((query)=>{
                query.invalidate();
            });
            if (filters?.refetchType === "none") {
                return Promise.resolve();
            }
            return this.refetchQueries({
                ...filters,
                type: filters?.refetchType ?? filters?.type ?? "active"
            }, options);
        });
    }
    refetchQueries(filters, options = {}) {
        const fetchOptions = {
            ...options,
            cancelRefetch: options.cancelRefetch ?? true
        };
        const promises = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$notifyManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["notifyManager"].batch(()=>this.#queryCache.findAll(filters).filter((query)=>!query.isDisabled() && !query.isStatic()).map((query)=>{
                let promise = query.fetch(void 0, fetchOptions);
                if (!fetchOptions.throwOnError) {
                    promise = promise.catch(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noop"]);
                }
                return query.state.fetchStatus === "paused" ? Promise.resolve() : promise;
            }));
        return Promise.all(promises).then(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noop"]);
    }
    fetchQuery(options) {
        const defaultedOptions = this.defaultQueryOptions(options);
        if (defaultedOptions.retry === void 0) {
            defaultedOptions.retry = false;
        }
        const query = this.#queryCache.build(this, defaultedOptions);
        return query.isStaleByTime((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["resolveStaleTime"])(defaultedOptions.staleTime, query)) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);
    }
    prefetchQuery(options) {
        return this.fetchQuery(options).then(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noop"]).catch(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noop"]);
    }
    fetchInfiniteQuery(options) {
        options.behavior = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$infiniteQueryBehavior$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["infiniteQueryBehavior"])(options.pages);
        return this.fetchQuery(options);
    }
    prefetchInfiniteQuery(options) {
        return this.fetchInfiniteQuery(options).then(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noop"]).catch(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["noop"]);
    }
    ensureInfiniteQueryData(options) {
        options.behavior = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$infiniteQueryBehavior$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["infiniteQueryBehavior"])(options.pages);
        return this.ensureQueryData(options);
    }
    resumePausedMutations() {
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$onlineManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["onlineManager"].isOnline()) {
            return this.#mutationCache.resumePausedMutations();
        }
        return Promise.resolve();
    }
    getQueryCache() {
        return this.#queryCache;
    }
    getMutationCache() {
        return this.#mutationCache;
    }
    getDefaultOptions() {
        return this.#defaultOptions;
    }
    setDefaultOptions(options) {
        this.#defaultOptions = options;
    }
    setQueryDefaults(queryKey, options) {
        this.#queryDefaults.set((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["hashKey"])(queryKey), {
            queryKey,
            defaultOptions: options
        });
    }
    getQueryDefaults(queryKey) {
        const defaults = [
            ...this.#queryDefaults.values()
        ];
        const result = {};
        defaults.forEach((queryDefault)=>{
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["partialMatchKey"])(queryKey, queryDefault.queryKey)) {
                Object.assign(result, queryDefault.defaultOptions);
            }
        });
        return result;
    }
    setMutationDefaults(mutationKey, options) {
        this.#mutationDefaults.set((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["hashKey"])(mutationKey), {
            mutationKey,
            defaultOptions: options
        });
    }
    getMutationDefaults(mutationKey) {
        const defaults = [
            ...this.#mutationDefaults.values()
        ];
        const result = {};
        defaults.forEach((queryDefault)=>{
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["partialMatchKey"])(mutationKey, queryDefault.mutationKey)) {
                Object.assign(result, queryDefault.defaultOptions);
            }
        });
        return result;
    }
    defaultQueryOptions(options) {
        if (options._defaulted) {
            return options;
        }
        const defaultedOptions = {
            ...this.#defaultOptions.queries,
            ...this.getQueryDefaults(options.queryKey),
            ...options,
            _defaulted: true
        };
        if (!defaultedOptions.queryHash) {
            defaultedOptions.queryHash = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["hashQueryKeyByOptions"])(defaultedOptions.queryKey, defaultedOptions);
        }
        if (defaultedOptions.refetchOnReconnect === void 0) {
            defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== "always";
        }
        if (defaultedOptions.throwOnError === void 0) {
            defaultedOptions.throwOnError = !!defaultedOptions.suspense;
        }
        if (!defaultedOptions.networkMode && defaultedOptions.persister) {
            defaultedOptions.networkMode = "offlineFirst";
        }
        if (defaultedOptions.queryFn === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tanstack$2f$query$2d$core$2f$build$2f$modern$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["skipToken"]) {
            defaultedOptions.enabled = false;
        }
        return defaultedOptions;
    }
    defaultMutationOptions(options) {
        if (options?._defaulted) {
            return options;
        }
        return {
            ...this.#defaultOptions.mutations,
            ...options?.mutationKey && this.getMutationDefaults(options.mutationKey),
            ...options,
            _defaulted: true
        };
    }
    clear() {
        this.#queryCache.clear();
        this.#mutationCache.clear();
    }
};
;
 //# sourceMappingURL=queryClient.js.map
}),
];

//# sourceMappingURL=node_modules_3f5b8291._.js.map